
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;

import ast.node.*;


parser code {:
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal BlockStatement block_statement;
non terminal IStatement statement;
non terminal List<IStatement> statement_list;
non terminal MainClass main_class;

/* Declare precedence and associativity  here */
precedence left TIMES;
precedence right UMINUS;

precedence left PLUS;
precedence left MINUS;
precedence left EQUAL;
precedence left TIMES;
precedence left AND;


/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT MEGGY SEMI main_class:m
    {:
    	RESULT = new Program(0, 0, m, new LinkedList<IClassDecl>());
    :}
    ;
    
main_class ::=
        CLASS ID:name LBRACE PUBLIC STATIC VOID MAIN 
		LPAREN STRING LBRACKET RBRACKET ID:param RPAREN block_statement:blk
          {:
          	RESULT = new MainClass(0, 0, name.lexeme, param.lexeme, blk);
          :}
        RBRACE 
    ;
    
block_statement ::=
	LBRACE statement_list:slist RBRACE
	{: 
		RESULT = new BlockStatement(0, 0, slist); 
	:}
	;
	
statement_list ::= statement_list:list statement:s
	{: list.add(s);
	 RESULT = list; 
	 :}
	 
	| statement:s
	{:  
		List<IStatement> l = new LinkedList<IStatement>(); 
		l.add(s); 
		RESULT = l; 
	:}
	;
	
statement ::= MEGGYSETPIXEL:op LPAREN exp:a COMMA exp:b COMMA exp:c RPAREN SEMI
		{: 
			RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); 
		:}
		| MEGGYDELAY:op LPAREN exp:a RPAREN SEMI
		{:
			RESULT = new MeggyDelay(op.line, op.pos, a);
		:}
		| IF:op LPAREN exp:arg RPAREN block_statement:b
		{:
			RESULT = new IfStatement(op.line, op.pos, arg, b, null);
		:}
		| IF:op LPAREN exp:arg RPAREN block_statement:b ELSE block_statement:c
		{:
			RESULT = new IfStatement(op.line, op.pos, arg, b, c);
		:}
		| WHILE:op LPAREN exp:arg RPAREN block_statement:b
		{:
			RESULT = new WhileStatement(op.line, op.pos, arg, b);
		:}
		;
		
		
		
exp ::= LPAREN BYTE:op RPAREN exp:e
		{: RESULT = new ByteCast(op.line, op.pos, e); :}
		| INT_LITERAL:n
		{: RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value); :}
		| COLOR_LITERAL:c
		{: RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value); :}
		| exp:a AND:op exp:b
		{: RESULT = new AndExp(op.line, op.pos, a, b); :}
		| NOT:n exp:a
		{: RESULT = new NotExp(n.line, n.pos, a); :}
		| TRUE:t
		{: RESULT = new TrueLiteral(t.line, t.pos, "true", 1); :}
		| exp:a PLUS:op exp:b
		{: RESULT = new PlusExp(op.line, op.pos, a, b); :}
		| exp:a MINUS:op exp:b
		{: RESULT = new MinusExp(op.line, op.pos, a, b); :}
		| exp:a EQUAL:op exp:b
		{: RESULT = new EqualExp(op.line, op.pos, a, b); :}
		| MEGGYCHECKBUTTON:op LPAREN exp:e RPAREN
		{: RESULT = new MeggyCheckButton(op.line, op.pos, e); :}
		| FALSE:f
		{: RESULT = new FalseLiteral(f.line, f.pos, f.lexeme,  0); :}
		| exp:a TIMES:op exp:b
		{: RESULT = new MulExp(op.line, op.pos, a, b); :}
		| MEGGYGETPIXEL:op LPAREN exp:e COMMA exp:f RPAREN
		{: RESULT = new MeggyGetPixel(op.line, op.pos, e, f); :}
		| BUTTON_LITERAL:b
		{: RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value); :}
		| MINUS:m exp:a
		{: RESULT = new NegExp(m.line, m.pos, a); :}
		| LPAREN exp:a RPAREN
		{: RESULT = a; :}
		;

