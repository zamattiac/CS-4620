Warning : Terminal "UMINUS" was declared but never used
Warning : Terminal "MEGGYSETAUXLEDS" was declared but never used
Warning : Terminal "EXTENDS" was declared but never used
Warning : Terminal "LENGTH" was declared but never used
===== Terminals =====
[0]EOF [1]error [2]PLUS [3]MINUS [4]TIMES 
[5]LPAREN [6]RPAREN [7]LBRACE [8]RBRACE [9]BOOLEAN 
[10]INT [11]BYTE [12]MAIN [13]IMPORT [14]IF 
[15]ELSE [16]LT [17]EQUAL [18]AND [19]NOT 
[20]WHILE [21]COMMA [22]DOT [23]NEW [24]PUBLIC 
[25]RETURN [26]STATIC [27]STRING [28]VOID [29]CLASS 
[30]EXTENDS [31]LBRACKET [32]RBRACKET [33]LENGTH [34]SEMI 
[35]ASSIGN [36]MEGGY [37]MEGGYCOLOR [38]MEGGYBUTTON [39]MEGGYTONE 
[40]MEGGYSETPIXEL [41]MEGGYSETAUXLEDS [42]MEGGYTONESTART [43]MEGGYDELAY [44]MEGGYGETPIXEL 
[45]MEGGYCHECKBUTTON [46]INT_LITERAL [47]ID [48]TRUE [49]FALSE 
[50]COLOR_LITERAL [51]BUTTON_LITERAL [52]TONE_LITERAL [53]THIS [54]UMINUS 


===== Non terminals =====
[0]program [1]exp [2]block_statement [3]statement [4]statement_list 
[5]main_class [6]class_decl [7]class_decl_list [8]method_decl [9]method_decl_list 
[10]type [11]formal_params [12]actual_params [13]var_decl_list [14]var_decl 
[15]NT$0 

===== Productions =====
[0] $START ::= program EOF 
[1] program ::= IMPORT MEGGY SEMI main_class class_decl_list 
[2] program ::= IMPORT MEGGY SEMI main_class 
[3] class_decl_list ::= class_decl_list class_decl 
[4] class_decl_list ::= class_decl 
[5] NT$0 ::= 
[6] main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE 
[7] class_decl ::= CLASS ID LBRACE var_decl_list method_decl_list RBRACE 
[8] var_decl_list ::= 
[9] var_decl_list ::= var_decl_list var_decl 
[10] var_decl ::= type ID SEMI 
[11] method_decl_list ::= 
[12] method_decl_list ::= method_decl_list method_decl 
[13] method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE 
[14] method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE 
[15] type ::= BOOLEAN 
[16] type ::= BYTE 
[17] type ::= INT 
[18] type ::= VOID 
[19] type ::= MEGGYCOLOR 
[20] type ::= MEGGYBUTTON 
[21] type ::= MEGGYTONE 
[22] type ::= ID 
[23] formal_params ::= 
[24] formal_params ::= type ID 
[25] formal_params ::= formal_params COMMA type ID 
[26] actual_params ::= 
[27] actual_params ::= exp 
[28] actual_params ::= actual_params COMMA exp 
[29] block_statement ::= statement_list 
[30] statement_list ::= 
[31] statement_list ::= statement statement_list 
[32] statement ::= LBRACE statement_list RBRACE 
[33] statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
[34] statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
[35] statement ::= IF LPAREN exp RPAREN statement 
[36] statement ::= IF LPAREN exp RPAREN statement ELSE statement 
[37] statement ::= WHILE LPAREN exp RPAREN statement 
[38] statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
[39] statement ::= exp DOT ID LPAREN actual_params RPAREN SEMI 
[40] statement ::= ID ASSIGN exp SEMI 
[41] exp ::= LPAREN BYTE RPAREN exp 
[42] exp ::= INT_LITERAL 
[43] exp ::= COLOR_LITERAL 
[44] exp ::= exp PLUS exp 
[45] exp ::= exp MINUS exp 
[46] exp ::= exp EQUAL exp 
[47] exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
[48] exp ::= LPAREN exp RPAREN 
[49] exp ::= exp AND exp 
[50] exp ::= NOT exp 
[51] exp ::= TRUE 
[52] exp ::= FALSE 
[53] exp ::= exp TIMES exp 
[54] exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
[55] exp ::= BUTTON_LITERAL 
[56] exp ::= MINUS exp 
[57] exp ::= exp LT exp 
[58] exp ::= exp DOT ID LPAREN actual_params RPAREN 
[59] exp ::= ID 
[60] exp ::= THIS 
[61] exp ::= NEW ID LPAREN RPAREN 
[62] exp ::= TONE_LITERAL 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [program ::= (*) IMPORT MEGGY SEMI main_class , {EOF }]
  [program ::= (*) IMPORT MEGGY SEMI main_class class_decl_list , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on IMPORT to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [168]

-------------------
lalr_state [2]: {
  [program ::= IMPORT (*) MEGGY SEMI main_class , {EOF }]
  [program ::= IMPORT (*) MEGGY SEMI main_class class_decl_list , {EOF }]
}
transition on MEGGY to state [3]

-------------------
lalr_state [3]: {
  [program ::= IMPORT MEGGY (*) SEMI main_class , {EOF }]
  [program ::= IMPORT MEGGY (*) SEMI main_class class_decl_list , {EOF }]
}
transition on SEMI to state [4]

-------------------
lalr_state [4]: {
  [program ::= IMPORT MEGGY SEMI (*) main_class class_decl_list , {EOF }]
  [main_class ::= (*) CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
  [program ::= IMPORT MEGGY SEMI (*) main_class , {EOF }]
}
transition on main_class to state [6]
transition on CLASS to state [5]

-------------------
lalr_state [5]: {
  [main_class ::= CLASS (*) ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on ID to state [150]

-------------------
lalr_state [6]: {
  [program ::= IMPORT MEGGY SEMI main_class (*) class_decl_list , {EOF }]
  [class_decl ::= (*) CLASS ID LBRACE var_decl_list method_decl_list RBRACE , {EOF CLASS }]
  [class_decl_list ::= (*) class_decl , {EOF CLASS }]
  [class_decl_list ::= (*) class_decl_list class_decl , {EOF CLASS }]
  [program ::= IMPORT MEGGY SEMI main_class (*) , {EOF }]
}
transition on class_decl_list to state [9]
transition on CLASS to state [8]
transition on class_decl to state [7]

-------------------
lalr_state [7]: {
  [class_decl_list ::= class_decl (*) , {EOF CLASS }]
}

-------------------
lalr_state [8]: {
  [class_decl ::= CLASS (*) ID LBRACE var_decl_list method_decl_list RBRACE , {EOF CLASS }]
}
transition on ID to state [11]

-------------------
lalr_state [9]: {
  [program ::= IMPORT MEGGY SEMI main_class class_decl_list (*) , {EOF }]
  [class_decl ::= (*) CLASS ID LBRACE var_decl_list method_decl_list RBRACE , {EOF CLASS }]
  [class_decl_list ::= class_decl_list (*) class_decl , {EOF CLASS }]
}
transition on CLASS to state [8]
transition on class_decl to state [10]

-------------------
lalr_state [10]: {
  [class_decl_list ::= class_decl_list class_decl (*) , {EOF CLASS }]
}

-------------------
lalr_state [11]: {
  [class_decl ::= CLASS ID (*) LBRACE var_decl_list method_decl_list RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [12]

-------------------
lalr_state [12]: {
  [var_decl_list ::= (*) , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [class_decl ::= CLASS ID LBRACE (*) var_decl_list method_decl_list RBRACE , {EOF CLASS }]
  [var_decl_list ::= (*) var_decl_list var_decl , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
}
transition on var_decl_list to state [13]

-------------------
lalr_state [13]: {
  [type ::= (*) MEGGYBUTTON , {ID }]
  [type ::= (*) INT , {ID }]
  [method_decl_list ::= (*) , {RBRACE PUBLIC }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) MEGGYCOLOR , {ID }]
  [class_decl ::= CLASS ID LBRACE var_decl_list (*) method_decl_list RBRACE , {EOF CLASS }]
  [type ::= (*) BYTE , {ID }]
  [var_decl ::= (*) type ID SEMI , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [type ::= (*) MEGGYTONE , {ID }]
  [type ::= (*) VOID , {ID }]
  [type ::= (*) BOOLEAN , {ID }]
  [var_decl_list ::= var_decl_list (*) var_decl , {RBRACE BOOLEAN INT BYTE PUBLIC VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE ID }]
  [method_decl_list ::= (*) method_decl_list method_decl , {RBRACE PUBLIC }]
}
transition on BYTE to state [24]
transition on var_decl to state [23]
transition on type to state [22]
transition on MEGGYCOLOR to state [21]
transition on ID to state [20]
transition on MEGGYBUTTON to state [19]
transition on MEGGYTONE to state [18]
transition on method_decl_list to state [17]
transition on VOID to state [16]
transition on BOOLEAN to state [15]
transition on INT to state [14]

-------------------
lalr_state [14]: {
  [type ::= INT (*) , {ID }]
}

-------------------
lalr_state [15]: {
  [type ::= BOOLEAN (*) , {ID }]
}

-------------------
lalr_state [16]: {
  [type ::= VOID (*) , {ID }]
}

-------------------
lalr_state [17]: {
  [method_decl ::= (*) PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
  [method_decl_list ::= method_decl_list (*) method_decl , {RBRACE PUBLIC }]
  [method_decl ::= (*) PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [class_decl ::= CLASS ID LBRACE var_decl_list method_decl_list (*) RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [29]
transition on RBRACE to state [28]
transition on method_decl to state [27]

-------------------
lalr_state [18]: {
  [type ::= MEGGYTONE (*) , {ID }]
}

-------------------
lalr_state [19]: {
  [type ::= MEGGYBUTTON (*) , {ID }]
}

-------------------
lalr_state [20]: {
  [type ::= ID (*) , {ID }]
}

-------------------
lalr_state [21]: {
  [type ::= MEGGYCOLOR (*) , {ID }]
}

-------------------
lalr_state [22]: {
  [var_decl ::= type (*) ID SEMI , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on ID to state [25]

-------------------
lalr_state [23]: {
  [var_decl_list ::= var_decl_list var_decl (*) , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [24]: {
  [type ::= BYTE (*) , {ID }]
}

-------------------
lalr_state [25]: {
  [var_decl ::= type ID (*) SEMI , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [26]

-------------------
lalr_state [26]: {
  [var_decl ::= type ID SEMI (*) , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW PUBLIC RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [27]: {
  [method_decl_list ::= method_decl_list method_decl (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [28]: {
  [class_decl ::= CLASS ID LBRACE var_decl_list method_decl_list RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [29]: {
  [type ::= (*) MEGGYBUTTON , {ID }]
  [type ::= (*) INT , {ID }]
  [method_decl ::= PUBLIC (*) type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) MEGGYCOLOR , {ID }]
  [method_decl ::= PUBLIC (*) type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
  [type ::= (*) BYTE , {ID }]
  [type ::= (*) MEGGYTONE , {ID }]
  [type ::= (*) VOID , {ID }]
  [type ::= (*) BOOLEAN , {ID }]
}
transition on BYTE to state [24]
transition on type to state [30]
transition on MEGGYCOLOR to state [21]
transition on ID to state [20]
transition on MEGGYBUTTON to state [19]
transition on MEGGYTONE to state [18]
transition on VOID to state [16]
transition on BOOLEAN to state [15]
transition on INT to state [14]

-------------------
lalr_state [30]: {
  [method_decl ::= PUBLIC type (*) ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
  [method_decl ::= PUBLIC type (*) ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
}
transition on ID to state [31]

-------------------
lalr_state [31]: {
  [method_decl ::= PUBLIC type ID (*) LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [method_decl ::= PUBLIC type ID (*) LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
}
transition on LPAREN to state [32]

-------------------
lalr_state [32]: {
  [type ::= (*) MEGGYBUTTON , {ID }]
  [type ::= (*) INT , {ID }]
  [method_decl ::= PUBLIC type ID LPAREN (*) formal_params RPAREN LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
  [formal_params ::= (*) formal_params COMMA type ID , {RPAREN COMMA }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) MEGGYCOLOR , {ID }]
  [type ::= (*) BYTE , {ID }]
  [formal_params ::= (*) type ID , {RPAREN COMMA }]
  [type ::= (*) MEGGYTONE , {ID }]
  [type ::= (*) VOID , {ID }]
  [type ::= (*) BOOLEAN , {ID }]
  [method_decl ::= PUBLIC type ID LPAREN (*) formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [formal_params ::= (*) , {RPAREN COMMA }]
}
transition on formal_params to state [34]
transition on BYTE to state [24]
transition on type to state [33]
transition on MEGGYCOLOR to state [21]
transition on ID to state [20]
transition on MEGGYBUTTON to state [19]
transition on MEGGYTONE to state [18]
transition on VOID to state [16]
transition on BOOLEAN to state [15]
transition on INT to state [14]

-------------------
lalr_state [33]: {
  [formal_params ::= type (*) ID , {RPAREN COMMA }]
}
transition on ID to state [149]

-------------------
lalr_state [34]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params (*) RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [formal_params ::= formal_params (*) COMMA type ID , {RPAREN COMMA }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params (*) RPAREN LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
}
transition on RPAREN to state [36]
transition on COMMA to state [35]

-------------------
lalr_state [35]: {
  [type ::= (*) MEGGYBUTTON , {ID }]
  [type ::= (*) INT , {ID }]
  [formal_params ::= formal_params COMMA (*) type ID , {RPAREN COMMA }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) MEGGYCOLOR , {ID }]
  [type ::= (*) BYTE , {ID }]
  [type ::= (*) MEGGYTONE , {ID }]
  [type ::= (*) VOID , {ID }]
  [type ::= (*) BOOLEAN , {ID }]
}
transition on BYTE to state [24]
transition on type to state [147]
transition on MEGGYCOLOR to state [21]
transition on ID to state [20]
transition on MEGGYBUTTON to state [19]
transition on MEGGYTONE to state [18]
transition on VOID to state [16]
transition on BOOLEAN to state [15]
transition on INT to state [14]

-------------------
lalr_state [36]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN (*) LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN (*) LBRACE var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
}
transition on LBRACE to state [37]

-------------------
lalr_state [37]: {
  [var_decl_list ::= (*) , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE (*) var_decl_list statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE (*) var_decl_list statement_list RBRACE , {RBRACE PUBLIC }]
  [var_decl_list ::= (*) var_decl_list var_decl , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on var_decl_list to state [38]

-------------------
lalr_state [38]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list (*) statement_list RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [type ::= (*) MEGGYCOLOR , {ID }]
  [var_decl ::= (*) type ID SEMI , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [type ::= (*) BOOLEAN , {ID }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [type ::= (*) MEGGYBUTTON , {ID }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [type ::= (*) BYTE , {ID }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement_list ::= (*) , {RBRACE RETURN }]
  [type ::= (*) MEGGYTONE , {ID }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [type ::= (*) INT , {ID }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list (*) statement_list RBRACE , {RBRACE PUBLIC }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement_list ::= (*) statement statement_list , {RBRACE RETURN }]
  [type ::= (*) ID , {ID }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [var_decl_list ::= var_decl_list (*) var_decl , {MINUS LPAREN LBRACE RBRACE BOOLEAN INT BYTE IF NOT WHILE NEW RETURN VOID MEGGYCOLOR MEGGYBUTTON MEGGYTONE MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [type ::= (*) VOID , {ID }]
}
transition on MEGGYGETPIXEL to state [61]
transition on VOID to state [16]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on MEGGYBUTTON to state [19]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCOLOR to state [21]
transition on MEGGYTONE to state [18]
transition on MEGGYCHECKBUTTON to state [55]
transition on statement_list to state [54]
transition on COLOR_LITERAL to state [53]
transition on MEGGYSETPIXEL to state [52]
transition on BOOLEAN to state [15]
transition on INT_LITERAL to state [51]
transition on var_decl to state [23]
transition on THIS to state [50]
transition on ID to state [49]
transition on LBRACE to state [48]
transition on LPAREN to state [47]
transition on TONE_LITERAL to state [46]
transition on IF to state [45]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on type to state [22]
transition on BYTE to state [24]
transition on INT to state [14]
transition on statement to state [40]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [39]: {
  [statement ::= MEGGYTONESTART (*) LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [141]

-------------------
lalr_state [40]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement_list ::= (*) , {RBRACE RETURN }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement_list ::= statement (*) statement_list , {RBRACE RETURN }]
  [statement_list ::= (*) statement statement_list , {RBRACE RETURN }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on MEGGYGETPIXEL to state [61]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCHECKBUTTON to state [55]
transition on statement_list to state [140]
transition on COLOR_LITERAL to state [53]
transition on MEGGYSETPIXEL to state [52]
transition on INT_LITERAL to state [51]
transition on THIS to state [50]
transition on ID to state [115]
transition on LPAREN to state [47]
transition on LBRACE to state [48]
transition on IF to state [45]
transition on TONE_LITERAL to state [46]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on statement to state [40]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [41]: {
  [statement ::= WHILE (*) LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [136]

-------------------
lalr_state [42]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= NOT (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [135]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [43]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= exp (*) DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on DOT to state [129]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [44]: {
  [exp ::= TRUE (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [45]: {
  [statement ::= IF (*) LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF (*) LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [123]

-------------------
lalr_state [46]: {
  [exp ::= TONE_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [47]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= LPAREN (*) exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= LPAREN (*) BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on BYTE to state [119]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [118]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [48]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement_list ::= (*) , {RBRACE }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement_list ::= (*) statement statement_list , {RBRACE }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= LBRACE (*) statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on MEGGYGETPIXEL to state [61]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCHECKBUTTON to state [55]
transition on COLOR_LITERAL to state [53]
transition on statement_list to state [116]
transition on MEGGYSETPIXEL to state [52]
transition on INT_LITERAL to state [51]
transition on THIS to state [50]
transition on ID to state [115]
transition on LPAREN to state [47]
transition on LBRACE to state [48]
transition on IF to state [45]
transition on TONE_LITERAL to state [46]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on statement to state [40]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [49]: {
  [statement ::= ID (*) ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= ID (*) , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [type ::= ID (*) , {ID }]
}
transition on ASSIGN to state [112]

-------------------
lalr_state [50]: {
  [exp ::= THIS (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [51]: {
  [exp ::= INT_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [52]: {
  [statement ::= MEGGYSETPIXEL (*) LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [104]

-------------------
lalr_state [53]: {
  [exp ::= COLOR_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [54]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list (*) RETURN exp SEMI RBRACE , {RBRACE PUBLIC }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list (*) RBRACE , {RBRACE PUBLIC }]
}
transition on RBRACE to state [100]
transition on RETURN to state [99]

-------------------
lalr_state [55]: {
  [exp ::= MEGGYCHECKBUTTON (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on LPAREN to state [96]

-------------------
lalr_state [56]: {
  [exp ::= FALSE (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [57]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= MINUS (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [95]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [58]: {
  [exp ::= BUTTON_LITERAL (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [59]: {
  [exp ::= NEW (*) ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on ID to state [92]

-------------------
lalr_state [60]: {
  [statement ::= MEGGYDELAY (*) LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on LPAREN to state [88]

-------------------
lalr_state [61]: {
  [exp ::= MEGGYGETPIXEL (*) LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on LPAREN to state [62]

-------------------
lalr_state [62]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= MEGGYGETPIXEL LPAREN (*) exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [63]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [63]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= MEGGYGETPIXEL LPAREN exp (*) COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]
transition on COMMA to state [65]

-------------------
lalr_state [64]: {
  [exp ::= ID (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [65]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= MEGGYGETPIXEL LPAREN exp COMMA (*) exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [86]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [66]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp LT (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [85]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [67]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp AND (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [84]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [68]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp PLUS (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [83]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [69]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp EQUAL (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [82]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [70]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp MINUS (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [81]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [71]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp TIMES (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [80]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [72]: {
  [exp ::= exp DOT (*) ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on ID to state [73]

-------------------
lalr_state [73]: {
  [exp ::= exp DOT ID (*) LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on LPAREN to state [74]

-------------------
lalr_state [74]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= (*) actual_params COMMA exp , {RPAREN COMMA }]
  [exp ::= exp DOT ID LPAREN (*) actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= (*) , {RPAREN COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= (*) exp , {RPAREN COMMA }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on actual_params to state [76]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [75]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [75]: {
  [actual_params ::= exp (*) , {RPAREN COMMA }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [76]: {
  [exp ::= exp DOT ID LPAREN actual_params (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [actual_params ::= actual_params (*) COMMA exp , {RPAREN COMMA }]
}
transition on RPAREN to state [78]
transition on COMMA to state [77]

-------------------
lalr_state [77]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= actual_params COMMA (*) exp , {RPAREN COMMA }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [79]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [78]: {
  [exp ::= exp DOT ID LPAREN actual_params RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [79]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= actual_params COMMA exp (*) , {RPAREN COMMA }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [80]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp TIMES exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [81]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp MINUS exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [82]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp EQUAL exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [83]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp PLUS exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [84]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp AND exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [85]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp LT exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [86]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [87]
transition on LT to state [66]

-------------------
lalr_state [87]: {
  [exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [88]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= MEGGYDELAY LPAREN (*) exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [89]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [89]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= MEGGYDELAY LPAREN exp (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [90]
transition on LT to state [66]

-------------------
lalr_state [90]: {
  [statement ::= MEGGYDELAY LPAREN exp RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [91]

-------------------
lalr_state [91]: {
  [statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [92]: {
  [exp ::= NEW ID (*) LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on LPAREN to state [93]

-------------------
lalr_state [93]: {
  [exp ::= NEW ID LPAREN (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on RPAREN to state [94]

-------------------
lalr_state [94]: {
  [exp ::= NEW ID LPAREN RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [95]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= MINUS exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [96]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= MEGGYCHECKBUTTON LPAREN (*) exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [97]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [97]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= MEGGYCHECKBUTTON LPAREN exp (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [98]
transition on LT to state [66]

-------------------
lalr_state [98]: {
  [exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [99]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN (*) exp SEMI RBRACE , {RBRACE PUBLIC }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [101]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [100]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [101]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp (*) SEMI RBRACE , {RBRACE PUBLIC }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on SEMI to state [102]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [102]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI (*) RBRACE , {RBRACE PUBLIC }]
}
transition on RBRACE to state [103]

-------------------
lalr_state [103]: {
  [method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE (*) , {RBRACE PUBLIC }]
}

-------------------
lalr_state [104]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [statement ::= MEGGYSETPIXEL LPAREN (*) exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [105]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [105]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [statement ::= MEGGYSETPIXEL LPAREN exp (*) COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]
transition on COMMA to state [106]

-------------------
lalr_state [106]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA (*) exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [107]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [107]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp (*) COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]
transition on COMMA to state [108]

-------------------
lalr_state [108]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA (*) exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [109]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [109]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [110]
transition on LT to state [66]

-------------------
lalr_state [110]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [111]

-------------------
lalr_state [111]: {
  [statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [112]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [statement ::= ID ASSIGN (*) exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [113]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [113]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [statement ::= ID ASSIGN exp (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on SEMI to state [114]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [114]: {
  [statement ::= ID ASSIGN exp SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [115]: {
  [statement ::= ID (*) ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= ID (*) , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on ASSIGN to state [112]

-------------------
lalr_state [116]: {
  [statement ::= LBRACE statement_list (*) RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on RBRACE to state [117]

-------------------
lalr_state [117]: {
  [statement ::= LBRACE statement_list RBRACE (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [118]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= LPAREN exp (*) RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [122]
transition on LT to state [66]

-------------------
lalr_state [119]: {
  [exp ::= LPAREN BYTE (*) RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on RPAREN to state [120]

-------------------
lalr_state [120]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= LPAREN BYTE RPAREN (*) exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [121]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [121]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= LPAREN BYTE RPAREN exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [122]: {
  [exp ::= LPAREN exp RPAREN (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}

-------------------
lalr_state [123]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= IF LPAREN (*) exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= IF LPAREN (*) exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [124]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [124]: {
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= IF LPAREN exp (*) RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= IF LPAREN exp (*) RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [125]
transition on LT to state [66]

-------------------
lalr_state [125]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= IF LPAREN exp RPAREN (*) statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= IF LPAREN exp RPAREN (*) statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on MEGGYGETPIXEL to state [61]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCHECKBUTTON to state [55]
transition on COLOR_LITERAL to state [53]
transition on MEGGYSETPIXEL to state [52]
transition on INT_LITERAL to state [51]
transition on THIS to state [50]
transition on ID to state [115]
transition on LPAREN to state [47]
transition on LBRACE to state [48]
transition on IF to state [45]
transition on TONE_LITERAL to state [46]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on statement to state [126]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [126]: {
  [statement ::= IF LPAREN exp RPAREN statement (*) ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= IF LPAREN exp RPAREN statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on ELSE to state [127]

-------------------
lalr_state [127]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= IF LPAREN exp RPAREN statement ELSE (*) statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on MEGGYGETPIXEL to state [61]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCHECKBUTTON to state [55]
transition on COLOR_LITERAL to state [53]
transition on MEGGYSETPIXEL to state [52]
transition on INT_LITERAL to state [51]
transition on THIS to state [50]
transition on ID to state [115]
transition on LPAREN to state [47]
transition on LBRACE to state [48]
transition on IF to state [45]
transition on TONE_LITERAL to state [46]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on statement to state [128]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [128]: {
  [statement ::= IF LPAREN exp RPAREN statement ELSE statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [129]: {
  [statement ::= exp DOT (*) ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp DOT (*) ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on ID to state [130]

-------------------
lalr_state [130]: {
  [statement ::= exp DOT ID (*) LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp DOT ID (*) LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on LPAREN to state [131]

-------------------
lalr_state [131]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= (*) actual_params COMMA exp , {RPAREN COMMA }]
  [exp ::= exp DOT ID LPAREN (*) actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= (*) , {RPAREN COMMA }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [statement ::= exp DOT ID LPAREN (*) actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [actual_params ::= (*) exp , {RPAREN COMMA }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on actual_params to state [132]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [75]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [132]: {
  [statement ::= exp DOT ID LPAREN actual_params (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp DOT ID LPAREN actual_params (*) RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [actual_params ::= actual_params (*) COMMA exp , {RPAREN COMMA }]
}
transition on RPAREN to state [133]
transition on COMMA to state [77]

-------------------
lalr_state [133]: {
  [statement ::= exp DOT ID LPAREN actual_params RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp DOT ID LPAREN actual_params RPAREN (*) , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on SEMI to state [134]

-------------------
lalr_state [134]: {
  [statement ::= exp DOT ID LPAREN actual_params RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [135]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= NOT exp (*) , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND COMMA DOT SEMI }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]

-------------------
lalr_state [136]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= WHILE LPAREN (*) exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [137]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [137]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= WHILE LPAREN exp (*) RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [138]
transition on LT to state [66]

-------------------
lalr_state [138]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= WHILE LPAREN exp RPAREN (*) statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on MEGGYGETPIXEL to state [61]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCHECKBUTTON to state [55]
transition on COLOR_LITERAL to state [53]
transition on MEGGYSETPIXEL to state [52]
transition on INT_LITERAL to state [51]
transition on THIS to state [50]
transition on ID to state [115]
transition on LPAREN to state [47]
transition on LBRACE to state [48]
transition on IF to state [45]
transition on TONE_LITERAL to state [46]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on statement to state [139]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [139]: {
  [statement ::= WHILE LPAREN exp RPAREN statement (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [140]: {
  [statement_list ::= statement statement_list (*) , {RBRACE RETURN }]
}

-------------------
lalr_state [141]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [statement ::= MEGGYTONESTART LPAREN (*) exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [142]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [142]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES LT EQUAL AND COMMA DOT }]
  [statement ::= MEGGYTONESTART LPAREN exp (*) COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on LT to state [66]
transition on COMMA to state [143]

-------------------
lalr_state [143]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= MEGGYTONESTART LPAREN exp COMMA (*) exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on BUTTON_LITERAL to state [58]
transition on LPAREN to state [47]
transition on COLOR_LITERAL to state [53]
transition on NOT to state [42]
transition on TONE_LITERAL to state [46]
transition on THIS to state [50]
transition on ID to state [64]
transition on FALSE to state [56]
transition on MEGGYGETPIXEL to state [61]
transition on INT_LITERAL to state [51]
transition on exp to state [144]
transition on TRUE to state [44]
transition on NEW to state [59]
transition on MEGGYCHECKBUTTON to state [55]
transition on MINUS to state [57]

-------------------
lalr_state [144]: {
  [exp ::= exp (*) AND exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) EQUAL exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) LT exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [statement ::= MEGGYTONESTART LPAREN exp COMMA exp (*) RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= exp (*) DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN LT EQUAL AND DOT }]
}
transition on DOT to state [72]
transition on TIMES to state [71]
transition on MINUS to state [70]
transition on EQUAL to state [69]
transition on PLUS to state [68]
transition on AND to state [67]
transition on RPAREN to state [145]
transition on LT to state [66]

-------------------
lalr_state [145]: {
  [statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN (*) SEMI , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}
transition on SEMI to state [146]

-------------------
lalr_state [146]: {
  [statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI (*) , {MINUS LPAREN LBRACE RBRACE IF ELSE NOT WHILE NEW RETURN MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
}

-------------------
lalr_state [147]: {
  [formal_params ::= formal_params COMMA type (*) ID , {RPAREN COMMA }]
}
transition on ID to state [148]

-------------------
lalr_state [148]: {
  [formal_params ::= formal_params COMMA type ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [149]: {
  [formal_params ::= type ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [150]: {
  [main_class ::= CLASS ID (*) LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [151]

-------------------
lalr_state [151]: {
  [main_class ::= CLASS ID LBRACE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [152]

-------------------
lalr_state [152]: {
  [main_class ::= CLASS ID LBRACE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on STATIC to state [153]

-------------------
lalr_state [153]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on VOID to state [154]

-------------------
lalr_state [154]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on MAIN to state [155]

-------------------
lalr_state [155]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on LPAREN to state [156]

-------------------
lalr_state [156]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on STRING to state [157]

-------------------
lalr_state [157]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on LBRACKET to state [158]

-------------------
lalr_state [158]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET (*) RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on RBRACKET to state [159]

-------------------
lalr_state [159]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET (*) ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on ID to state [160]

-------------------
lalr_state [160]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID (*) RPAREN LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on RPAREN to state [161]

-------------------
lalr_state [161]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN (*) LBRACE block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [162]

-------------------
lalr_state [162]: {
  [exp ::= (*) FALSE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp LT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TONE_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement_list ::= (*) , {RBRACE }]
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE (*) block_statement RBRACE NT$0 RBRACE , {EOF CLASS }]
  [statement ::= (*) IF LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) ID ASSIGN exp SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NOT exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) BUTTON_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) THIS , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) COLOR_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp DOT ID LPAREN actual_params RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement_list ::= (*) statement statement_list , {RBRACE }]
  [statement ::= (*) IF LPAREN exp RPAREN statement ELSE statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) LPAREN BYTE RPAREN exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp EQUAL exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) TRUE , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MINUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) NEW ID LPAREN RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [block_statement ::= (*) statement_list , {RBRACE }]
  [statement ::= (*) MEGGYDELAY LPAREN exp RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) exp DOT ID LPAREN actual_params RPAREN SEMI , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) exp AND exp , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) ID , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [statement ::= (*) LBRACE statement_list RBRACE , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [statement ::= (*) WHILE LPAREN exp RPAREN statement , {MINUS LPAREN LBRACE RBRACE IF NOT WHILE NEW MEGGYSETPIXEL MEGGYTONESTART MEGGYDELAY MEGGYGETPIXEL MEGGYCHECKBUTTON INT_LITERAL ID TRUE FALSE COLOR_LITERAL BUTTON_LITERAL TONE_LITERAL THIS }]
  [exp ::= (*) INT_LITERAL , {PLUS MINUS TIMES LT EQUAL AND DOT }]
  [exp ::= (*) MEGGYCHECKBUTTON LPAREN exp RPAREN , {PLUS MINUS TIMES LT EQUAL AND DOT }]
}
transition on MEGGYGETPIXEL to state [61]
transition on MEGGYDELAY to state [60]
transition on NEW to state [59]
transition on block_statement to state [164]
transition on BUTTON_LITERAL to state [58]
transition on MINUS to state [57]
transition on FALSE to state [56]
transition on MEGGYCHECKBUTTON to state [55]
transition on COLOR_LITERAL to state [53]
transition on statement_list to state [163]
transition on MEGGYSETPIXEL to state [52]
transition on INT_LITERAL to state [51]
transition on THIS to state [50]
transition on ID to state [115]
transition on LPAREN to state [47]
transition on LBRACE to state [48]
transition on IF to state [45]
transition on TONE_LITERAL to state [46]
transition on TRUE to state [44]
transition on exp to state [43]
transition on NOT to state [42]
transition on WHILE to state [41]
transition on statement to state [40]
transition on MEGGYTONESTART to state [39]

-------------------
lalr_state [163]: {
  [block_statement ::= statement_list (*) , {RBRACE }]
}

-------------------
lalr_state [164]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement (*) RBRACE NT$0 RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [165]

-------------------
lalr_state [165]: {
  [NT$0 ::= (*) , {RBRACE }]
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE (*) NT$0 RBRACE , {EOF CLASS }]
}
transition on NT$0 to state [166]

-------------------
lalr_state [166]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 (*) RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [167]

-------------------
lalr_state [167]: {
  [main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [168]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 13:SHIFT(to state 2)]
From state #1
 [term 0:SHIFT(to state 168)]
From state #2
 [term 36:SHIFT(to state 3)]
From state #3
 [term 34:SHIFT(to state 4)]
From state #4
 [term 29:SHIFT(to state 5)]
From state #5
 [term 47:SHIFT(to state 150)]
From state #6
 [term 0:REDUCE(with prod 2)] [term 29:SHIFT(to state 8)]
From state #7
 [term 0:REDUCE(with prod 4)] [term 29:REDUCE(with prod 4)]
From state #8
 [term 47:SHIFT(to state 11)]
From state #9
 [term 0:REDUCE(with prod 1)] [term 29:SHIFT(to state 8)]
From state #10
 [term 0:REDUCE(with prod 3)] [term 29:REDUCE(with prod 3)]
From state #11
 [term 7:SHIFT(to state 12)]
From state #12
 [term 8:REDUCE(with prod 8)] [term 9:REDUCE(with prod 8)]
 [term 10:REDUCE(with prod 8)] [term 11:REDUCE(with prod 8)]
 [term 24:REDUCE(with prod 8)] [term 28:REDUCE(with prod 8)]
 [term 37:REDUCE(with prod 8)] [term 38:REDUCE(with prod 8)]
 [term 39:REDUCE(with prod 8)] [term 47:REDUCE(with prod 8)]
From state #13
 [term 8:REDUCE(with prod 11)] [term 9:SHIFT(to state 15)]
 [term 10:SHIFT(to state 14)] [term 11:SHIFT(to state 24)]
 [term 24:REDUCE(with prod 11)] [term 28:SHIFT(to state 16)]
 [term 37:SHIFT(to state 21)] [term 38:SHIFT(to state 19)]
 [term 39:SHIFT(to state 18)] [term 47:SHIFT(to state 20)]
From state #14
 [term 47:REDUCE(with prod 17)]
From state #15
 [term 47:REDUCE(with prod 15)]
From state #16
 [term 47:REDUCE(with prod 18)]
From state #17
 [term 8:SHIFT(to state 28)] [term 24:SHIFT(to state 29)]
From state #18
 [term 47:REDUCE(with prod 21)]
From state #19
 [term 47:REDUCE(with prod 20)]
From state #20
 [term 47:REDUCE(with prod 22)]
From state #21
 [term 47:REDUCE(with prod 19)]
From state #22
 [term 47:SHIFT(to state 25)]
From state #23
 [term 3:REDUCE(with prod 9)] [term 5:REDUCE(with prod 9)]
 [term 7:REDUCE(with prod 9)] [term 8:REDUCE(with prod 9)]
 [term 9:REDUCE(with prod 9)] [term 10:REDUCE(with prod 9)]
 [term 11:REDUCE(with prod 9)] [term 14:REDUCE(with prod 9)]
 [term 19:REDUCE(with prod 9)] [term 20:REDUCE(with prod 9)]
 [term 23:REDUCE(with prod 9)] [term 24:REDUCE(with prod 9)]
 [term 25:REDUCE(with prod 9)] [term 28:REDUCE(with prod 9)]
 [term 37:REDUCE(with prod 9)] [term 38:REDUCE(with prod 9)]
 [term 39:REDUCE(with prod 9)] [term 40:REDUCE(with prod 9)]
 [term 42:REDUCE(with prod 9)] [term 43:REDUCE(with prod 9)]
 [term 44:REDUCE(with prod 9)] [term 45:REDUCE(with prod 9)]
 [term 46:REDUCE(with prod 9)] [term 47:REDUCE(with prod 9)]
 [term 48:REDUCE(with prod 9)] [term 49:REDUCE(with prod 9)]
 [term 50:REDUCE(with prod 9)] [term 51:REDUCE(with prod 9)]
 [term 52:REDUCE(with prod 9)] [term 53:REDUCE(with prod 9)]
From state #24
 [term 47:REDUCE(with prod 16)]
From state #25
 [term 34:SHIFT(to state 26)]
From state #26
 [term 3:REDUCE(with prod 10)] [term 5:REDUCE(with prod 10)]
 [term 7:REDUCE(with prod 10)] [term 8:REDUCE(with prod 10)]
 [term 9:REDUCE(with prod 10)] [term 10:REDUCE(with prod 10)]
 [term 11:REDUCE(with prod 10)] [term 14:REDUCE(with prod 10)]
 [term 19:REDUCE(with prod 10)] [term 20:REDUCE(with prod 10)]
 [term 23:REDUCE(with prod 10)] [term 24:REDUCE(with prod 10)]
 [term 25:REDUCE(with prod 10)] [term 28:REDUCE(with prod 10)]
 [term 37:REDUCE(with prod 10)] [term 38:REDUCE(with prod 10)]
 [term 39:REDUCE(with prod 10)] [term 40:REDUCE(with prod 10)]
 [term 42:REDUCE(with prod 10)] [term 43:REDUCE(with prod 10)]
 [term 44:REDUCE(with prod 10)] [term 45:REDUCE(with prod 10)]
 [term 46:REDUCE(with prod 10)] [term 47:REDUCE(with prod 10)]
 [term 48:REDUCE(with prod 10)] [term 49:REDUCE(with prod 10)]
 [term 50:REDUCE(with prod 10)] [term 51:REDUCE(with prod 10)]
 [term 52:REDUCE(with prod 10)] [term 53:REDUCE(with prod 10)]
From state #27
 [term 8:REDUCE(with prod 12)] [term 24:REDUCE(with prod 12)]
From state #28
 [term 0:REDUCE(with prod 7)] [term 29:REDUCE(with prod 7)]
From state #29
 [term 9:SHIFT(to state 15)] [term 10:SHIFT(to state 14)]
 [term 11:SHIFT(to state 24)] [term 28:SHIFT(to state 16)]
 [term 37:SHIFT(to state 21)] [term 38:SHIFT(to state 19)]
 [term 39:SHIFT(to state 18)] [term 47:SHIFT(to state 20)]
From state #30
 [term 47:SHIFT(to state 31)]
From state #31
 [term 5:SHIFT(to state 32)]
From state #32
 [term 6:REDUCE(with prod 23)] [term 9:SHIFT(to state 15)]
 [term 10:SHIFT(to state 14)] [term 11:SHIFT(to state 24)]
 [term 21:REDUCE(with prod 23)] [term 28:SHIFT(to state 16)]
 [term 37:SHIFT(to state 21)] [term 38:SHIFT(to state 19)]
 [term 39:SHIFT(to state 18)] [term 47:SHIFT(to state 20)]
From state #33
 [term 47:SHIFT(to state 149)]
From state #34
 [term 6:SHIFT(to state 36)] [term 21:SHIFT(to state 35)]
From state #35
 [term 9:SHIFT(to state 15)] [term 10:SHIFT(to state 14)]
 [term 11:SHIFT(to state 24)] [term 28:SHIFT(to state 16)]
 [term 37:SHIFT(to state 21)] [term 38:SHIFT(to state 19)]
 [term 39:SHIFT(to state 18)] [term 47:SHIFT(to state 20)]
From state #36
 [term 7:SHIFT(to state 37)]
From state #37
 [term 3:REDUCE(with prod 8)] [term 5:REDUCE(with prod 8)]
 [term 7:REDUCE(with prod 8)] [term 8:REDUCE(with prod 8)]
 [term 9:REDUCE(with prod 8)] [term 10:REDUCE(with prod 8)]
 [term 11:REDUCE(with prod 8)] [term 14:REDUCE(with prod 8)]
 [term 19:REDUCE(with prod 8)] [term 20:REDUCE(with prod 8)]
 [term 23:REDUCE(with prod 8)] [term 25:REDUCE(with prod 8)]
 [term 28:REDUCE(with prod 8)] [term 37:REDUCE(with prod 8)]
 [term 38:REDUCE(with prod 8)] [term 39:REDUCE(with prod 8)]
 [term 40:REDUCE(with prod 8)] [term 42:REDUCE(with prod 8)]
 [term 43:REDUCE(with prod 8)] [term 44:REDUCE(with prod 8)]
 [term 45:REDUCE(with prod 8)] [term 46:REDUCE(with prod 8)]
 [term 47:REDUCE(with prod 8)] [term 48:REDUCE(with prod 8)]
 [term 49:REDUCE(with prod 8)] [term 50:REDUCE(with prod 8)]
 [term 51:REDUCE(with prod 8)] [term 52:REDUCE(with prod 8)]
 [term 53:REDUCE(with prod 8)]
From state #38
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 8:REDUCE(with prod 30)]
 [term 9:SHIFT(to state 15)] [term 10:SHIFT(to state 14)]
 [term 11:SHIFT(to state 24)] [term 14:SHIFT(to state 45)]
 [term 19:SHIFT(to state 42)] [term 20:SHIFT(to state 41)]
 [term 23:SHIFT(to state 59)] [term 25:REDUCE(with prod 30)]
 [term 28:SHIFT(to state 16)] [term 37:SHIFT(to state 21)]
 [term 38:SHIFT(to state 19)] [term 39:SHIFT(to state 18)]
 [term 40:SHIFT(to state 52)] [term 42:SHIFT(to state 39)]
 [term 43:SHIFT(to state 60)] [term 44:SHIFT(to state 61)]
 [term 45:SHIFT(to state 55)] [term 46:SHIFT(to state 51)]
 [term 47:SHIFT(to state 49)] [term 48:SHIFT(to state 44)]
 [term 49:SHIFT(to state 56)] [term 50:SHIFT(to state 53)]
 [term 51:SHIFT(to state 58)] [term 52:SHIFT(to state 46)]
 [term 53:SHIFT(to state 50)]
From state #39
 [term 5:SHIFT(to state 141)]
From state #40
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 8:REDUCE(with prod 30)]
 [term 14:SHIFT(to state 45)] [term 19:SHIFT(to state 42)]
 [term 20:SHIFT(to state 41)] [term 23:SHIFT(to state 59)]
 [term 25:REDUCE(with prod 30)] [term 40:SHIFT(to state 52)]
 [term 42:SHIFT(to state 39)] [term 43:SHIFT(to state 60)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 115)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #41
 [term 5:SHIFT(to state 136)]
From state #42
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #43
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 22:SHIFT(to state 129)]
From state #44
 [term 2:REDUCE(with prod 51)] [term 3:REDUCE(with prod 51)]
 [term 4:REDUCE(with prod 51)] [term 6:REDUCE(with prod 51)]
 [term 16:REDUCE(with prod 51)] [term 17:REDUCE(with prod 51)]
 [term 18:REDUCE(with prod 51)] [term 21:REDUCE(with prod 51)]
 [term 22:REDUCE(with prod 51)] [term 34:REDUCE(with prod 51)]
From state #45
 [term 5:SHIFT(to state 123)]
From state #46
 [term 2:REDUCE(with prod 62)] [term 3:REDUCE(with prod 62)]
 [term 4:REDUCE(with prod 62)] [term 6:REDUCE(with prod 62)]
 [term 16:REDUCE(with prod 62)] [term 17:REDUCE(with prod 62)]
 [term 18:REDUCE(with prod 62)] [term 21:REDUCE(with prod 62)]
 [term 22:REDUCE(with prod 62)] [term 34:REDUCE(with prod 62)]
From state #47
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 11:SHIFT(to state 119)] [term 19:SHIFT(to state 42)]
 [term 23:SHIFT(to state 59)] [term 44:SHIFT(to state 61)]
 [term 45:SHIFT(to state 55)] [term 46:SHIFT(to state 51)]
 [term 47:SHIFT(to state 64)] [term 48:SHIFT(to state 44)]
 [term 49:SHIFT(to state 56)] [term 50:SHIFT(to state 53)]
 [term 51:SHIFT(to state 58)] [term 52:SHIFT(to state 46)]
 [term 53:SHIFT(to state 50)]
From state #48
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 8:REDUCE(with prod 30)]
 [term 14:SHIFT(to state 45)] [term 19:SHIFT(to state 42)]
 [term 20:SHIFT(to state 41)] [term 23:SHIFT(to state 59)]
 [term 40:SHIFT(to state 52)] [term 42:SHIFT(to state 39)]
 [term 43:SHIFT(to state 60)] [term 44:SHIFT(to state 61)]
 [term 45:SHIFT(to state 55)] [term 46:SHIFT(to state 51)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 44)]
 [term 49:SHIFT(to state 56)] [term 50:SHIFT(to state 53)]
 [term 51:SHIFT(to state 58)] [term 52:SHIFT(to state 46)]
 [term 53:SHIFT(to state 50)]
From state #49
 [term 2:REDUCE(with prod 59)] [term 3:REDUCE(with prod 59)]
 [term 4:REDUCE(with prod 59)] [term 16:REDUCE(with prod 59)]
 [term 17:REDUCE(with prod 59)] [term 18:REDUCE(with prod 59)]
 [term 22:REDUCE(with prod 59)] [term 35:SHIFT(to state 112)]
 [term 47:REDUCE(with prod 22)]
From state #50
 [term 2:REDUCE(with prod 60)] [term 3:REDUCE(with prod 60)]
 [term 4:REDUCE(with prod 60)] [term 6:REDUCE(with prod 60)]
 [term 16:REDUCE(with prod 60)] [term 17:REDUCE(with prod 60)]
 [term 18:REDUCE(with prod 60)] [term 21:REDUCE(with prod 60)]
 [term 22:REDUCE(with prod 60)] [term 34:REDUCE(with prod 60)]
From state #51
 [term 2:REDUCE(with prod 42)] [term 3:REDUCE(with prod 42)]
 [term 4:REDUCE(with prod 42)] [term 6:REDUCE(with prod 42)]
 [term 16:REDUCE(with prod 42)] [term 17:REDUCE(with prod 42)]
 [term 18:REDUCE(with prod 42)] [term 21:REDUCE(with prod 42)]
 [term 22:REDUCE(with prod 42)] [term 34:REDUCE(with prod 42)]
From state #52
 [term 5:SHIFT(to state 104)]
From state #53
 [term 2:REDUCE(with prod 43)] [term 3:REDUCE(with prod 43)]
 [term 4:REDUCE(with prod 43)] [term 6:REDUCE(with prod 43)]
 [term 16:REDUCE(with prod 43)] [term 17:REDUCE(with prod 43)]
 [term 18:REDUCE(with prod 43)] [term 21:REDUCE(with prod 43)]
 [term 22:REDUCE(with prod 43)] [term 34:REDUCE(with prod 43)]
From state #54
 [term 8:SHIFT(to state 100)] [term 25:SHIFT(to state 99)]
From state #55
 [term 5:SHIFT(to state 96)]
From state #56
 [term 2:REDUCE(with prod 52)] [term 3:REDUCE(with prod 52)]
 [term 4:REDUCE(with prod 52)] [term 6:REDUCE(with prod 52)]
 [term 16:REDUCE(with prod 52)] [term 17:REDUCE(with prod 52)]
 [term 18:REDUCE(with prod 52)] [term 21:REDUCE(with prod 52)]
 [term 22:REDUCE(with prod 52)] [term 34:REDUCE(with prod 52)]
From state #57
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #58
 [term 2:REDUCE(with prod 55)] [term 3:REDUCE(with prod 55)]
 [term 4:REDUCE(with prod 55)] [term 6:REDUCE(with prod 55)]
 [term 16:REDUCE(with prod 55)] [term 17:REDUCE(with prod 55)]
 [term 18:REDUCE(with prod 55)] [term 21:REDUCE(with prod 55)]
 [term 22:REDUCE(with prod 55)] [term 34:REDUCE(with prod 55)]
From state #59
 [term 47:SHIFT(to state 92)]
From state #60
 [term 5:SHIFT(to state 88)]
From state #61
 [term 5:SHIFT(to state 62)]
From state #62
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #63
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 21:SHIFT(to state 65)] [term 22:SHIFT(to state 72)]
From state #64
 [term 2:REDUCE(with prod 59)] [term 3:REDUCE(with prod 59)]
 [term 4:REDUCE(with prod 59)] [term 6:REDUCE(with prod 59)]
 [term 16:REDUCE(with prod 59)] [term 17:REDUCE(with prod 59)]
 [term 18:REDUCE(with prod 59)] [term 21:REDUCE(with prod 59)]
 [term 22:REDUCE(with prod 59)] [term 34:REDUCE(with prod 59)]
From state #65
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #66
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #67
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #68
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #69
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #70
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #71
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #72
 [term 47:SHIFT(to state 73)]
From state #73
 [term 5:SHIFT(to state 74)]
From state #74
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 6:REDUCE(with prod 26)] [term 19:SHIFT(to state 42)]
 [term 21:REDUCE(with prod 26)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #75
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 27)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 21:REDUCE(with prod 27)]
 [term 22:SHIFT(to state 72)]
From state #76
 [term 6:SHIFT(to state 78)] [term 21:SHIFT(to state 77)]
From state #77
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #78
 [term 2:REDUCE(with prod 58)] [term 3:REDUCE(with prod 58)]
 [term 4:REDUCE(with prod 58)] [term 6:REDUCE(with prod 58)]
 [term 16:REDUCE(with prod 58)] [term 17:REDUCE(with prod 58)]
 [term 18:REDUCE(with prod 58)] [term 21:REDUCE(with prod 58)]
 [term 22:REDUCE(with prod 58)] [term 34:REDUCE(with prod 58)]
From state #79
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 28)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 21:REDUCE(with prod 28)]
 [term 22:SHIFT(to state 72)]
From state #80
 [term 2:REDUCE(with prod 53)] [term 3:REDUCE(with prod 53)]
 [term 4:REDUCE(with prod 53)] [term 6:REDUCE(with prod 53)]
 [term 16:REDUCE(with prod 53)] [term 17:REDUCE(with prod 53)]
 [term 18:REDUCE(with prod 53)] [term 21:REDUCE(with prod 53)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 53)]
From state #81
 [term 2:REDUCE(with prod 45)] [term 3:REDUCE(with prod 45)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 45)]
 [term 16:REDUCE(with prod 45)] [term 17:REDUCE(with prod 45)]
 [term 18:REDUCE(with prod 45)] [term 21:REDUCE(with prod 45)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 45)]
From state #82
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 46)]
 [term 16:SHIFT(to state 66)] [term 17:REDUCE(with prod 46)]
 [term 18:REDUCE(with prod 46)] [term 21:REDUCE(with prod 46)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 46)]
From state #83
 [term 2:REDUCE(with prod 44)] [term 3:REDUCE(with prod 44)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 44)]
 [term 16:REDUCE(with prod 44)] [term 17:REDUCE(with prod 44)]
 [term 18:REDUCE(with prod 44)] [term 21:REDUCE(with prod 44)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 44)]
From state #84
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 49)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:REDUCE(with prod 49)] [term 21:REDUCE(with prod 49)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 49)]
From state #85
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 57)]
 [term 16:REDUCE(with prod 57)] [term 17:REDUCE(with prod 57)]
 [term 18:REDUCE(with prod 57)] [term 21:REDUCE(with prod 57)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 57)]
From state #86
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 87)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #87
 [term 2:REDUCE(with prod 54)] [term 3:REDUCE(with prod 54)]
 [term 4:REDUCE(with prod 54)] [term 6:REDUCE(with prod 54)]
 [term 16:REDUCE(with prod 54)] [term 17:REDUCE(with prod 54)]
 [term 18:REDUCE(with prod 54)] [term 21:REDUCE(with prod 54)]
 [term 22:REDUCE(with prod 54)] [term 34:REDUCE(with prod 54)]
From state #88
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #89
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 90)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #90
 [term 34:SHIFT(to state 91)]
From state #91
 [term 3:REDUCE(with prod 34)] [term 5:REDUCE(with prod 34)]
 [term 7:REDUCE(with prod 34)] [term 8:REDUCE(with prod 34)]
 [term 14:REDUCE(with prod 34)] [term 15:REDUCE(with prod 34)]
 [term 19:REDUCE(with prod 34)] [term 20:REDUCE(with prod 34)]
 [term 23:REDUCE(with prod 34)] [term 25:REDUCE(with prod 34)]
 [term 40:REDUCE(with prod 34)] [term 42:REDUCE(with prod 34)]
 [term 43:REDUCE(with prod 34)] [term 44:REDUCE(with prod 34)]
 [term 45:REDUCE(with prod 34)] [term 46:REDUCE(with prod 34)]
 [term 47:REDUCE(with prod 34)] [term 48:REDUCE(with prod 34)]
 [term 49:REDUCE(with prod 34)] [term 50:REDUCE(with prod 34)]
 [term 51:REDUCE(with prod 34)] [term 52:REDUCE(with prod 34)]
 [term 53:REDUCE(with prod 34)]
From state #92
 [term 5:SHIFT(to state 93)]
From state #93
 [term 6:SHIFT(to state 94)]
From state #94
 [term 2:REDUCE(with prod 61)] [term 3:REDUCE(with prod 61)]
 [term 4:REDUCE(with prod 61)] [term 6:REDUCE(with prod 61)]
 [term 16:REDUCE(with prod 61)] [term 17:REDUCE(with prod 61)]
 [term 18:REDUCE(with prod 61)] [term 21:REDUCE(with prod 61)]
 [term 22:REDUCE(with prod 61)] [term 34:REDUCE(with prod 61)]
From state #95
 [term 2:REDUCE(with prod 56)] [term 3:REDUCE(with prod 56)]
 [term 4:SHIFT(to state 71)] [term 6:REDUCE(with prod 56)]
 [term 16:REDUCE(with prod 56)] [term 17:REDUCE(with prod 56)]
 [term 18:REDUCE(with prod 56)] [term 21:REDUCE(with prod 56)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 56)]
From state #96
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #97
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 98)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #98
 [term 2:REDUCE(with prod 47)] [term 3:REDUCE(with prod 47)]
 [term 4:REDUCE(with prod 47)] [term 6:REDUCE(with prod 47)]
 [term 16:REDUCE(with prod 47)] [term 17:REDUCE(with prod 47)]
 [term 18:REDUCE(with prod 47)] [term 21:REDUCE(with prod 47)]
 [term 22:REDUCE(with prod 47)] [term 34:REDUCE(with prod 47)]
From state #99
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #100
 [term 8:REDUCE(with prod 13)] [term 24:REDUCE(with prod 13)]
From state #101
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 22:SHIFT(to state 72)] [term 34:SHIFT(to state 102)]
From state #102
 [term 8:SHIFT(to state 103)]
From state #103
 [term 8:REDUCE(with prod 14)] [term 24:REDUCE(with prod 14)]
From state #104
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #105
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 21:SHIFT(to state 106)] [term 22:SHIFT(to state 72)]
From state #106
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #107
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 21:SHIFT(to state 108)] [term 22:SHIFT(to state 72)]
From state #108
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #109
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 110)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #110
 [term 34:SHIFT(to state 111)]
From state #111
 [term 3:REDUCE(with prod 33)] [term 5:REDUCE(with prod 33)]
 [term 7:REDUCE(with prod 33)] [term 8:REDUCE(with prod 33)]
 [term 14:REDUCE(with prod 33)] [term 15:REDUCE(with prod 33)]
 [term 19:REDUCE(with prod 33)] [term 20:REDUCE(with prod 33)]
 [term 23:REDUCE(with prod 33)] [term 25:REDUCE(with prod 33)]
 [term 40:REDUCE(with prod 33)] [term 42:REDUCE(with prod 33)]
 [term 43:REDUCE(with prod 33)] [term 44:REDUCE(with prod 33)]
 [term 45:REDUCE(with prod 33)] [term 46:REDUCE(with prod 33)]
 [term 47:REDUCE(with prod 33)] [term 48:REDUCE(with prod 33)]
 [term 49:REDUCE(with prod 33)] [term 50:REDUCE(with prod 33)]
 [term 51:REDUCE(with prod 33)] [term 52:REDUCE(with prod 33)]
 [term 53:REDUCE(with prod 33)]
From state #112
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #113
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 22:SHIFT(to state 72)] [term 34:SHIFT(to state 114)]
From state #114
 [term 3:REDUCE(with prod 40)] [term 5:REDUCE(with prod 40)]
 [term 7:REDUCE(with prod 40)] [term 8:REDUCE(with prod 40)]
 [term 14:REDUCE(with prod 40)] [term 15:REDUCE(with prod 40)]
 [term 19:REDUCE(with prod 40)] [term 20:REDUCE(with prod 40)]
 [term 23:REDUCE(with prod 40)] [term 25:REDUCE(with prod 40)]
 [term 40:REDUCE(with prod 40)] [term 42:REDUCE(with prod 40)]
 [term 43:REDUCE(with prod 40)] [term 44:REDUCE(with prod 40)]
 [term 45:REDUCE(with prod 40)] [term 46:REDUCE(with prod 40)]
 [term 47:REDUCE(with prod 40)] [term 48:REDUCE(with prod 40)]
 [term 49:REDUCE(with prod 40)] [term 50:REDUCE(with prod 40)]
 [term 51:REDUCE(with prod 40)] [term 52:REDUCE(with prod 40)]
 [term 53:REDUCE(with prod 40)]
From state #115
 [term 2:REDUCE(with prod 59)] [term 3:REDUCE(with prod 59)]
 [term 4:REDUCE(with prod 59)] [term 16:REDUCE(with prod 59)]
 [term 17:REDUCE(with prod 59)] [term 18:REDUCE(with prod 59)]
 [term 22:REDUCE(with prod 59)] [term 35:SHIFT(to state 112)]
From state #116
 [term 8:SHIFT(to state 117)]
From state #117
 [term 3:REDUCE(with prod 32)] [term 5:REDUCE(with prod 32)]
 [term 7:REDUCE(with prod 32)] [term 8:REDUCE(with prod 32)]
 [term 14:REDUCE(with prod 32)] [term 15:REDUCE(with prod 32)]
 [term 19:REDUCE(with prod 32)] [term 20:REDUCE(with prod 32)]
 [term 23:REDUCE(with prod 32)] [term 25:REDUCE(with prod 32)]
 [term 40:REDUCE(with prod 32)] [term 42:REDUCE(with prod 32)]
 [term 43:REDUCE(with prod 32)] [term 44:REDUCE(with prod 32)]
 [term 45:REDUCE(with prod 32)] [term 46:REDUCE(with prod 32)]
 [term 47:REDUCE(with prod 32)] [term 48:REDUCE(with prod 32)]
 [term 49:REDUCE(with prod 32)] [term 50:REDUCE(with prod 32)]
 [term 51:REDUCE(with prod 32)] [term 52:REDUCE(with prod 32)]
 [term 53:REDUCE(with prod 32)]
From state #118
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 122)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #119
 [term 6:SHIFT(to state 120)]
From state #120
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #121
 [term 2:REDUCE(with prod 41)] [term 3:REDUCE(with prod 41)]
 [term 4:REDUCE(with prod 41)] [term 6:REDUCE(with prod 41)]
 [term 16:REDUCE(with prod 41)] [term 17:REDUCE(with prod 41)]
 [term 18:REDUCE(with prod 41)] [term 21:REDUCE(with prod 41)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 41)]
From state #122
 [term 2:REDUCE(with prod 48)] [term 3:REDUCE(with prod 48)]
 [term 4:REDUCE(with prod 48)] [term 6:REDUCE(with prod 48)]
 [term 16:REDUCE(with prod 48)] [term 17:REDUCE(with prod 48)]
 [term 18:REDUCE(with prod 48)] [term 21:REDUCE(with prod 48)]
 [term 22:REDUCE(with prod 48)] [term 34:REDUCE(with prod 48)]
From state #123
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #124
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 125)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #125
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 14:SHIFT(to state 45)]
 [term 19:SHIFT(to state 42)] [term 20:SHIFT(to state 41)]
 [term 23:SHIFT(to state 59)] [term 40:SHIFT(to state 52)]
 [term 42:SHIFT(to state 39)] [term 43:SHIFT(to state 60)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 115)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #126
 [term 3:REDUCE(with prod 35)] [term 5:REDUCE(with prod 35)]
 [term 7:REDUCE(with prod 35)] [term 8:REDUCE(with prod 35)]
 [term 14:REDUCE(with prod 35)] [term 15:SHIFT(to state 127)]
 [term 19:REDUCE(with prod 35)] [term 20:REDUCE(with prod 35)]
 [term 23:REDUCE(with prod 35)] [term 25:REDUCE(with prod 35)]
 [term 40:REDUCE(with prod 35)] [term 42:REDUCE(with prod 35)]
 [term 43:REDUCE(with prod 35)] [term 44:REDUCE(with prod 35)]
 [term 45:REDUCE(with prod 35)] [term 46:REDUCE(with prod 35)]
 [term 47:REDUCE(with prod 35)] [term 48:REDUCE(with prod 35)]
 [term 49:REDUCE(with prod 35)] [term 50:REDUCE(with prod 35)]
 [term 51:REDUCE(with prod 35)] [term 52:REDUCE(with prod 35)]
 [term 53:REDUCE(with prod 35)]
From state #127
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 14:SHIFT(to state 45)]
 [term 19:SHIFT(to state 42)] [term 20:SHIFT(to state 41)]
 [term 23:SHIFT(to state 59)] [term 40:SHIFT(to state 52)]
 [term 42:SHIFT(to state 39)] [term 43:SHIFT(to state 60)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 115)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #128
 [term 3:REDUCE(with prod 36)] [term 5:REDUCE(with prod 36)]
 [term 7:REDUCE(with prod 36)] [term 8:REDUCE(with prod 36)]
 [term 14:REDUCE(with prod 36)] [term 15:REDUCE(with prod 36)]
 [term 19:REDUCE(with prod 36)] [term 20:REDUCE(with prod 36)]
 [term 23:REDUCE(with prod 36)] [term 25:REDUCE(with prod 36)]
 [term 40:REDUCE(with prod 36)] [term 42:REDUCE(with prod 36)]
 [term 43:REDUCE(with prod 36)] [term 44:REDUCE(with prod 36)]
 [term 45:REDUCE(with prod 36)] [term 46:REDUCE(with prod 36)]
 [term 47:REDUCE(with prod 36)] [term 48:REDUCE(with prod 36)]
 [term 49:REDUCE(with prod 36)] [term 50:REDUCE(with prod 36)]
 [term 51:REDUCE(with prod 36)] [term 52:REDUCE(with prod 36)]
 [term 53:REDUCE(with prod 36)]
From state #129
 [term 47:SHIFT(to state 130)]
From state #130
 [term 5:SHIFT(to state 131)]
From state #131
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 6:REDUCE(with prod 26)] [term 19:SHIFT(to state 42)]
 [term 21:REDUCE(with prod 26)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #132
 [term 6:SHIFT(to state 133)] [term 21:SHIFT(to state 77)]
From state #133
 [term 2:REDUCE(with prod 58)] [term 3:REDUCE(with prod 58)]
 [term 4:REDUCE(with prod 58)] [term 16:REDUCE(with prod 58)]
 [term 17:REDUCE(with prod 58)] [term 18:REDUCE(with prod 58)]
 [term 22:REDUCE(with prod 58)] [term 34:SHIFT(to state 134)]
From state #134
 [term 3:REDUCE(with prod 39)] [term 5:REDUCE(with prod 39)]
 [term 7:REDUCE(with prod 39)] [term 8:REDUCE(with prod 39)]
 [term 14:REDUCE(with prod 39)] [term 15:REDUCE(with prod 39)]
 [term 19:REDUCE(with prod 39)] [term 20:REDUCE(with prod 39)]
 [term 23:REDUCE(with prod 39)] [term 25:REDUCE(with prod 39)]
 [term 40:REDUCE(with prod 39)] [term 42:REDUCE(with prod 39)]
 [term 43:REDUCE(with prod 39)] [term 44:REDUCE(with prod 39)]
 [term 45:REDUCE(with prod 39)] [term 46:REDUCE(with prod 39)]
 [term 47:REDUCE(with prod 39)] [term 48:REDUCE(with prod 39)]
 [term 49:REDUCE(with prod 39)] [term 50:REDUCE(with prod 39)]
 [term 51:REDUCE(with prod 39)] [term 52:REDUCE(with prod 39)]
 [term 53:REDUCE(with prod 39)]
From state #135
 [term 2:REDUCE(with prod 50)] [term 3:REDUCE(with prod 50)]
 [term 4:REDUCE(with prod 50)] [term 6:REDUCE(with prod 50)]
 [term 16:REDUCE(with prod 50)] [term 17:REDUCE(with prod 50)]
 [term 18:REDUCE(with prod 50)] [term 21:REDUCE(with prod 50)]
 [term 22:SHIFT(to state 72)] [term 34:REDUCE(with prod 50)]
From state #136
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #137
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 138)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #138
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 14:SHIFT(to state 45)]
 [term 19:SHIFT(to state 42)] [term 20:SHIFT(to state 41)]
 [term 23:SHIFT(to state 59)] [term 40:SHIFT(to state 52)]
 [term 42:SHIFT(to state 39)] [term 43:SHIFT(to state 60)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 115)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #139
 [term 3:REDUCE(with prod 37)] [term 5:REDUCE(with prod 37)]
 [term 7:REDUCE(with prod 37)] [term 8:REDUCE(with prod 37)]
 [term 14:REDUCE(with prod 37)] [term 15:REDUCE(with prod 37)]
 [term 19:REDUCE(with prod 37)] [term 20:REDUCE(with prod 37)]
 [term 23:REDUCE(with prod 37)] [term 25:REDUCE(with prod 37)]
 [term 40:REDUCE(with prod 37)] [term 42:REDUCE(with prod 37)]
 [term 43:REDUCE(with prod 37)] [term 44:REDUCE(with prod 37)]
 [term 45:REDUCE(with prod 37)] [term 46:REDUCE(with prod 37)]
 [term 47:REDUCE(with prod 37)] [term 48:REDUCE(with prod 37)]
 [term 49:REDUCE(with prod 37)] [term 50:REDUCE(with prod 37)]
 [term 51:REDUCE(with prod 37)] [term 52:REDUCE(with prod 37)]
 [term 53:REDUCE(with prod 37)]
From state #140
 [term 8:REDUCE(with prod 31)] [term 25:REDUCE(with prod 31)]
From state #141
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #142
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 16:SHIFT(to state 66)]
 [term 17:SHIFT(to state 69)] [term 18:SHIFT(to state 67)]
 [term 21:SHIFT(to state 143)] [term 22:SHIFT(to state 72)]
From state #143
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 19:SHIFT(to state 42)] [term 23:SHIFT(to state 59)]
 [term 44:SHIFT(to state 61)] [term 45:SHIFT(to state 55)]
 [term 46:SHIFT(to state 51)] [term 47:SHIFT(to state 64)]
 [term 48:SHIFT(to state 44)] [term 49:SHIFT(to state 56)]
 [term 50:SHIFT(to state 53)] [term 51:SHIFT(to state 58)]
 [term 52:SHIFT(to state 46)] [term 53:SHIFT(to state 50)]
From state #144
 [term 2:SHIFT(to state 68)] [term 3:SHIFT(to state 70)]
 [term 4:SHIFT(to state 71)] [term 6:SHIFT(to state 145)]
 [term 16:SHIFT(to state 66)] [term 17:SHIFT(to state 69)]
 [term 18:SHIFT(to state 67)] [term 22:SHIFT(to state 72)]
From state #145
 [term 34:SHIFT(to state 146)]
From state #146
 [term 3:REDUCE(with prod 38)] [term 5:REDUCE(with prod 38)]
 [term 7:REDUCE(with prod 38)] [term 8:REDUCE(with prod 38)]
 [term 14:REDUCE(with prod 38)] [term 15:REDUCE(with prod 38)]
 [term 19:REDUCE(with prod 38)] [term 20:REDUCE(with prod 38)]
 [term 23:REDUCE(with prod 38)] [term 25:REDUCE(with prod 38)]
 [term 40:REDUCE(with prod 38)] [term 42:REDUCE(with prod 38)]
 [term 43:REDUCE(with prod 38)] [term 44:REDUCE(with prod 38)]
 [term 45:REDUCE(with prod 38)] [term 46:REDUCE(with prod 38)]
 [term 47:REDUCE(with prod 38)] [term 48:REDUCE(with prod 38)]
 [term 49:REDUCE(with prod 38)] [term 50:REDUCE(with prod 38)]
 [term 51:REDUCE(with prod 38)] [term 52:REDUCE(with prod 38)]
 [term 53:REDUCE(with prod 38)]
From state #147
 [term 47:SHIFT(to state 148)]
From state #148
 [term 6:REDUCE(with prod 25)] [term 21:REDUCE(with prod 25)]
From state #149
 [term 6:REDUCE(with prod 24)] [term 21:REDUCE(with prod 24)]
From state #150
 [term 7:SHIFT(to state 151)]
From state #151
 [term 24:SHIFT(to state 152)]
From state #152
 [term 26:SHIFT(to state 153)]
From state #153
 [term 28:SHIFT(to state 154)]
From state #154
 [term 12:SHIFT(to state 155)]
From state #155
 [term 5:SHIFT(to state 156)]
From state #156
 [term 27:SHIFT(to state 157)]
From state #157
 [term 31:SHIFT(to state 158)]
From state #158
 [term 32:SHIFT(to state 159)]
From state #159
 [term 47:SHIFT(to state 160)]
From state #160
 [term 6:SHIFT(to state 161)]
From state #161
 [term 7:SHIFT(to state 162)]
From state #162
 [term 3:SHIFT(to state 57)] [term 5:SHIFT(to state 47)]
 [term 7:SHIFT(to state 48)] [term 8:REDUCE(with prod 30)]
 [term 14:SHIFT(to state 45)] [term 19:SHIFT(to state 42)]
 [term 20:SHIFT(to state 41)] [term 23:SHIFT(to state 59)]
 [term 40:SHIFT(to state 52)] [term 42:SHIFT(to state 39)]
 [term 43:SHIFT(to state 60)] [term 44:SHIFT(to state 61)]
 [term 45:SHIFT(to state 55)] [term 46:SHIFT(to state 51)]
 [term 47:SHIFT(to state 115)] [term 48:SHIFT(to state 44)]
 [term 49:SHIFT(to state 56)] [term 50:SHIFT(to state 53)]
 [term 51:SHIFT(to state 58)] [term 52:SHIFT(to state 46)]
 [term 53:SHIFT(to state 50)]
From state #163
 [term 8:REDUCE(with prod 29)]
From state #164
 [term 8:SHIFT(to state 165)]
From state #165
 [term 8:REDUCE(with prod 5)]
From state #166
 [term 8:SHIFT(to state 167)]
From state #167
 [term 0:REDUCE(with prod 6)] [term 29:REDUCE(with prod 6)]
From state #168
 [term 0:REDUCE(with prod 0)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1]
From state #1
From state #2
From state #3
From state #4
 [non term 5->state 6]
From state #5
From state #6
 [non term 6->state 7] [non term 7->state 9]
From state #7
From state #8
From state #9
 [non term 6->state 10]
From state #10
From state #11
From state #12
 [non term 13->state 13]
From state #13
 [non term 9->state 17] [non term 10->state 22] [non term 14->state 23]
From state #14
From state #15
From state #16
From state #17
 [non term 8->state 27]
From state #18
From state #19
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
From state #29
 [non term 10->state 30]
From state #30
From state #31
From state #32
 [non term 10->state 33] [non term 11->state 34]
From state #33
From state #34
From state #35
 [non term 10->state 147]
From state #36
From state #37
 [non term 13->state 38]
From state #38
 [non term 1->state 43] [non term 3->state 40] [non term 4->state 54]
 [non term 10->state 22] [non term 14->state 23]
From state #39
From state #40
 [non term 1->state 43] [non term 3->state 40] [non term 4->state 140]
From state #41
From state #42
 [non term 1->state 135]
From state #43
From state #44
From state #45
From state #46
From state #47
 [non term 1->state 118]
From state #48
 [non term 1->state 43] [non term 3->state 40] [non term 4->state 116]
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
 [non term 1->state 95]
From state #58
From state #59
From state #60
From state #61
From state #62
 [non term 1->state 63]
From state #63
From state #64
From state #65
 [non term 1->state 86]
From state #66
 [non term 1->state 85]
From state #67
 [non term 1->state 84]
From state #68
 [non term 1->state 83]
From state #69
 [non term 1->state 82]
From state #70
 [non term 1->state 81]
From state #71
 [non term 1->state 80]
From state #72
From state #73
From state #74
 [non term 1->state 75] [non term 12->state 76]
From state #75
From state #76
From state #77
 [non term 1->state 79]
From state #78
From state #79
From state #80
From state #81
From state #82
From state #83
From state #84
From state #85
From state #86
From state #87
From state #88
 [non term 1->state 89]
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
From state #95
From state #96
 [non term 1->state 97]
From state #97
From state #98
From state #99
 [non term 1->state 101]
From state #100
From state #101
From state #102
From state #103
From state #104
 [non term 1->state 105]
From state #105
From state #106
 [non term 1->state 107]
From state #107
From state #108
 [non term 1->state 109]
From state #109
From state #110
From state #111
From state #112
 [non term 1->state 113]
From state #113
From state #114
From state #115
From state #116
From state #117
From state #118
From state #119
From state #120
 [non term 1->state 121]
From state #121
From state #122
From state #123
 [non term 1->state 124]
From state #124
From state #125
 [non term 1->state 43] [non term 3->state 126]
From state #126
From state #127
 [non term 1->state 43] [non term 3->state 128]
From state #128
From state #129
From state #130
From state #131
 [non term 1->state 75] [non term 12->state 132]
From state #132
From state #133
From state #134
From state #135
From state #136
 [non term 1->state 137]
From state #137
From state #138
 [non term 1->state 43] [non term 3->state 139]
From state #139
From state #140
From state #141
 [non term 1->state 142]
From state #142
From state #143
 [non term 1->state 144]
From state #144
From state #145
From state #146
From state #147
From state #148
From state #149
From state #150
From state #151
From state #152
From state #153
From state #154
From state #155
From state #156
From state #157
From state #158
From state #159
From state #160
From state #161
From state #162
 [non term 1->state 43] [non term 2->state 164] [non term 3->state 40]
 [non term 4->state 163]
From state #163
From state #164
From state #165
 [non term 15->state 166]
From state #166
From state #167
From state #168
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 4 warnings
  55 terminals, 16 non-terminals, and 63 productions declared, 
  producing 169 unique parse states.
  4 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "mj.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
