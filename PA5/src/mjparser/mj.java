
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 28 12:16:30 EST 2017
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 28 12:16:30 EST 2017
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\011\004\000\002\011\003\000\002\021\002" +
    "\000\002\007\024\000\002\010\010\000\002\017\002\000" +
    "\002\017\004\000\002\020\005\000\002\013\002\000\002" +
    "\013\004\000\002\012\014\000\002\012\017\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\002\000\002\015\004\000\002" +
    "\015\006\000\002\016\002\000\002\016\003\000\002\016" +
    "\005\000\002\004\003\000\002\006\002\000\002\006\004" +
    "\000\002\005\005\000\002\005\013\000\002\005\007\000" +
    "\002\005\007\000\002\005\011\000\002\005\007\000\002" +
    "\005\011\000\002\005\011\000\002\005\006\000\002\003" +
    "\006\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\006\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\005\000\002\003" +
    "\010\000\002\003\003\000\002\003\004\000\002\003\005" +
    "\000\002\003\010\000\002\003\003\000\002\003\003\000" +
    "\002\003\006\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\017\005\001\002\000\004\002\253\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\231\001\002\000" +
    "\006\002\uffff\037\013\001\002\000\006\002\ufffd\037\ufffd" +
    "\001\002\000\004\061\016\001\002\000\006\002\000\037" +
    "\013\001\002\000\006\002\ufffe\037\ufffe\001\002\000\004" +
    "\011\017\001\002\000\026\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\032\ufff9\036\ufff9\047\ufff9\050\ufff9\051\ufff9\061\ufff9" +
    "\001\002\000\026\012\ufff6\013\022\014\021\015\033\032" +
    "\ufff6\036\023\047\030\050\026\051\025\061\027\001\002" +
    "\000\004\061\ufff0\001\002\000\004\061\ufff2\001\002\000" +
    "\004\061\uffef\001\002\000\006\012\037\032\040\001\002" +
    "\000\004\061\uffec\001\002\000\004\061\uffed\001\002\000" +
    "\004\061\uffeb\001\002\000\004\061\uffee\001\002\000\004" +
    "\061\034\001\002\000\076\005\ufff8\007\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\025\ufff8\026\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\036\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\001\002\000\004\061\ufff1\001\002\000\004\044\035" +
    "\001\002\000\076\005\ufff7\007\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\020\ufff7\025\ufff7\026\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\036\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\001" +
    "\002\000\006\012\ufff5\032\ufff5\001\002\000\006\002\ufffa" +
    "\037\ufffa\001\002\000\022\013\022\014\021\015\033\036" +
    "\023\047\030\050\026\051\025\061\027\001\002\000\004" +
    "\061\042\001\002\000\004\007\043\001\002\000\026\010" +
    "\uffea\013\022\014\021\015\033\027\uffea\036\023\047\030" +
    "\050\026\051\025\061\027\001\002\000\004\061\230\001" +
    "\002\000\006\010\047\027\046\001\002\000\022\013\022" +
    "\014\021\015\033\036\023\047\030\050\026\051\025\061" +
    "\027\001\002\000\004\011\050\001\002\000\074\005\ufff9" +
    "\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\020" +
    "\ufff9\025\ufff9\026\ufff9\031\ufff9\033\ufff9\036\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\001\002\000\074\005\074\007\062\011" +
    "\063\012\uffe3\013\022\014\021\015\033\020\060\025\055" +
    "\026\054\031\076\033\uffe3\036\023\047\030\050\026\051" +
    "\025\052\067\054\052\055\077\056\100\057\072\060\066" +
    "\061\064\062\057\063\073\064\070\065\075\066\061\067" +
    "\065\001\002\000\004\007\220\001\002\000\056\005\074" +
    "\007\062\011\063\012\uffe3\020\060\025\055\026\054\031" +
    "\076\033\uffe3\052\067\054\052\055\077\056\100\057\072" +
    "\060\066\061\166\062\057\063\073\064\070\065\075\066" +
    "\061\067\065\001\002\000\004\007\213\001\002\000\036" +
    "\005\074\007\062\025\055\031\076\056\100\057\072\060" +
    "\066\061\103\062\057\063\073\064\070\065\075\066\061" +
    "\067\065\001\002\000\020\004\107\005\111\006\112\022" +
    "\105\023\110\024\106\030\204\001\002\000\026\004\uffce" +
    "\005\uffce\006\uffce\010\uffce\022\uffce\023\uffce\024\uffce\027" +
    "\uffce\030\uffce\044\uffce\001\002\000\004\007\176\001\002" +
    "\000\026\004\uffc3\005\uffc3\006\uffc3\010\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\027\uffc3\030\uffc3\044\uffc3\001\002\000\040" +
    "\005\074\007\062\015\172\025\055\031\076\056\100\057" +
    "\072\060\066\061\103\062\057\063\073\064\070\065\075" +
    "\066\061\067\065\001\002\000\054\005\074\007\062\011" +
    "\063\012\uffe3\020\060\025\055\026\054\031\076\052\067" +
    "\054\052\055\077\056\100\057\072\060\066\061\166\062" +
    "\057\063\073\064\070\065\075\066\061\067\065\001\002" +
    "\000\024\004\uffc6\005\uffc6\006\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\030\uffc6\045\163\061\uffeb\001\002\000\026\004\uffc5" +
    "\005\uffc5\006\uffc5\010\uffc5\022\uffc5\023\uffc5\024\uffc5\027" +
    "\uffc5\030\uffc5\044\uffc5\001\002\000\026\004\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030" +
    "\uffd7\044\uffd7\001\002\000\004\007\153\001\002\000\026" +
    "\004\uffd6\005\uffd6\006\uffd6\010\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\027\uffd6\030\uffd6\044\uffd6\001\002\000\006\012\147" +
    "\033\146\001\002\000\004\007\143\001\002\000\026\004" +
    "\uffcd\005\uffcd\006\uffcd\010\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\027\uffcd\030\uffcd\044\uffcd\001\002\000\036\005\074\007" +
    "\062\025\055\031\076\056\100\057\072\060\066\061\103" +
    "\062\057\063\073\064\070\065\075\066\061\067\065\001" +
    "\002\000\026\004\uffca\005\uffca\006\uffca\010\uffca\022\uffca" +
    "\023\uffca\024\uffca\027\uffca\030\uffca\044\uffca\001\002\000" +
    "\004\061\137\001\002\000\004\007\133\001\002\000\004" +
    "\007\101\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\027\104" +
    "\030\113\001\002\000\026\004\uffc6\005\uffc6\006\uffc6\010" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\044\uffc6" +
    "\001\002\000\036\005\074\007\062\025\055\031\076\056" +
    "\100\057\072\060\066\061\103\062\057\063\073\064\070" +
    "\065\075\066\061\067\065\001\002\000\036\005\074\007" +
    "\062\025\055\031\076\056\100\057\072\060\066\061\103" +
    "\062\057\063\073\064\070\065\075\066\061\067\065\001" +
    "\002\000\036\005\074\007\062\025\055\031\076\056\100" +
    "\057\072\060\066\061\103\062\057\063\073\064\070\065" +
    "\075\066\061\067\065\001\002\000\036\005\074\007\062" +
    "\025\055\031\076\056\100\057\072\060\066\061\103\062" +
    "\057\063\073\064\070\065\075\066\061\067\065\001\002" +
    "\000\036\005\074\007\062\025\055\031\076\056\100\057" +
    "\072\060\066\061\103\062\057\063\073\064\070\065\075" +
    "\066\061\067\065\001\002\000\036\005\074\007\062\025" +
    "\055\031\076\056\100\057\072\060\066\061\103\062\057" +
    "\063\073\064\070\065\075\066\061\067\065\001\002\000" +
    "\036\005\074\007\062\025\055\031\076\056\100\057\072" +
    "\060\066\061\103\062\057\063\073\064\070\065\075\066" +
    "\061\067\065\001\002\000\004\061\114\001\002\000\004" +
    "\007\115\001\002\000\042\005\074\007\062\010\uffe7\025" +
    "\055\027\uffe7\031\076\056\100\057\072\060\066\061\103" +
    "\062\057\063\073\064\070\065\075\066\061\067\065\001" +
    "\002\000\024\004\107\005\111\006\112\010\uffe6\022\105" +
    "\023\110\024\106\027\uffe6\030\113\001\002\000\006\010" +
    "\121\027\120\001\002\000\036\005\074\007\062\025\055" +
    "\031\076\056\100\057\072\060\066\061\103\062\057\063" +
    "\073\064\070\065\075\066\061\067\065\001\002\000\026" +
    "\004\uffc7\005\uffc7\006\uffc7\010\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\027\uffc7\030\uffc7\044\uffc7\001\002\000\024\004\107" +
    "\005\111\006\112\010\uffe5\022\105\023\110\024\106\027" +
    "\uffe5\030\113\001\002\000\026\004\uffcc\005\uffcc\006\uffcc" +
    "\010\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc\030\113\044" +
    "\uffcc\001\002\000\026\004\uffd4\005\uffd4\006\112\010\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\113\044\uffd4\001" +
    "\002\000\026\004\107\005\111\006\112\010\uffd3\022\105" +
    "\023\uffd3\024\uffd3\027\uffd3\030\113\044\uffd3\001\002\000" +
    "\026\004\uffd5\005\uffd5\006\112\010\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\027\uffd5\030\113\044\uffd5\001\002\000\026\004" +
    "\107\005\111\006\112\010\uffd0\022\105\023\110\024\uffd0" +
    "\027\uffd0\030\113\044\uffd0\001\002\000\026\004\107\005" +
    "\111\006\112\010\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8" +
    "\030\113\044\uffc8\001\002\000\022\004\107\005\111\006" +
    "\112\010\132\022\105\023\110\024\106\030\113\001\002" +
    "\000\026\004\uffcb\005\uffcb\006\uffcb\010\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\027\uffcb\030\uffcb\044\uffcb\001\002\000\036" +
    "\005\074\007\062\025\055\031\076\056\100\057\072\060" +
    "\066\061\103\062\057\063\073\064\070\065\075\066\061" +
    "\067\065\001\002\000\022\004\107\005\111\006\112\010" +
    "\135\022\105\023\110\024\106\030\113\001\002\000\004" +
    "\044\136\001\002\000\060\005\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\020\uffdf\021\uffdf\025\uffdf\026\uffdf\031\uffdf\033\uffdf" +
    "\052\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf" +
    "\001\002\000\004\007\140\001\002\000\004\010\141\001" +
    "\002\000\026\004\uffc4\005\uffc4\006\uffc4\010\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\027\uffc4\030\uffc4\044\uffc4\001\002\000" +
    "\026\004\uffc9\005\uffc9\006\112\010\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\027\uffc9\030\113\044\uffc9\001\002\000\036\005" +
    "\074\007\062\025\055\031\076\056\100\057\072\060\066" +
    "\061\103\062\057\063\073\064\070\065\075\066\061\067" +
    "\065\001\002\000\022\004\107\005\111\006\112\010\145" +
    "\022\105\023\110\024\106\030\113\001\002\000\026\004" +
    "\uffd2\005\uffd2\006\uffd2\010\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\027\uffd2\030\uffd2\044\uffd2\001\002\000\036\005\074\007" +
    "\062\025\055\031\076\056\100\057\072\060\066\061\103" +
    "\062\057\063\073\064\070\065\075\066\061\067\065\001" +
    "\002\000\006\012\ufff4\032\ufff4\001\002\000\022\004\107" +
    "\005\111\006\112\022\105\023\110\024\106\030\113\044" +
    "\151\001\002\000\004\012\152\001\002\000\006\012\ufff3" +
    "\032\ufff3\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\027\155" +
    "\030\113\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\027\157" +
    "\030\113\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\010\161\022\105\023\110\024\106" +
    "\030\113\001\002\000\004\044\162\001\002\000\060\005" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\020\uffe0\021\uffe0\025\uffe0" +
    "\026\uffe0\031\uffe0\033\uffe0\052\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\001\002\000\036\005\074\007" +
    "\062\025\055\031\076\056\100\057\072\060\066\061\103" +
    "\062\057\063\073\064\070\065\075\066\061\067\065\001" +
    "\002\000\022\004\107\005\111\006\112\022\105\023\110" +
    "\024\106\030\113\044\165\001\002\000\060\005\uffd9\007" +
    "\uffd9\011\uffd9\012\uffd9\020\uffd9\021\uffd9\025\uffd9\026\uffd9" +
    "\031\uffd9\033\uffd9\052\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\001\002\000\022\004\uffc6\005\uffc6\006" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\030\uffc6\045\163\001\002" +
    "\000\004\012\170\001\002\000\060\005\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1" +
    "\033\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\001\002\000\022\004\107\005\111\006\112\010" +
    "\175\022\105\023\110\024\106\030\113\001\002\000\004" +
    "\010\173\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\026\004" +
    "\uffd8\005\uffd8\006\uffd8\010\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\027\uffd8\030\113\044\uffd8\001\002\000\026\004\uffd1\005" +
    "\uffd1\006\uffd1\010\uffd1\022\uffd1\023\uffd1\024\uffd1\027\uffd1" +
    "\030\uffd1\044\uffd1\001\002\000\036\005\074\007\062\025" +
    "\055\031\076\056\100\057\072\060\066\061\103\062\057" +
    "\063\073\064\070\065\075\066\061\067\065\001\002\000" +
    "\022\004\107\005\111\006\112\010\200\022\105\023\110" +
    "\024\106\030\113\001\002\000\052\005\074\007\062\011" +
    "\063\020\060\025\055\026\054\031\076\052\067\054\052" +
    "\055\077\056\100\057\072\060\066\061\166\062\057\063" +
    "\073\064\070\065\075\066\061\067\065\001\002\000\060" +
    "\005\uffde\007\uffde\011\uffde\012\uffde\020\uffde\021\202\025" +
    "\uffde\026\uffde\031\uffde\033\uffde\052\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\001\002\000\052\005\074" +
    "\007\062\011\063\020\060\025\055\026\054\031\076\052" +
    "\067\054\052\055\077\056\100\057\072\060\066\061\166" +
    "\062\057\063\073\064\070\065\075\066\061\067\065\001" +
    "\002\000\060\005\uffdd\007\uffdd\011\uffdd\012\uffdd\020\uffdd" +
    "\021\uffdd\025\uffdd\026\uffdd\031\uffdd\033\uffdd\052\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000" +
    "\004\061\205\001\002\000\004\007\206\001\002\000\042" +
    "\005\074\007\062\010\uffe7\025\055\027\uffe7\031\076\056" +
    "\100\057\072\060\066\061\103\062\057\063\073\064\070" +
    "\065\075\066\061\067\065\001\002\000\006\010\210\027" +
    "\120\001\002\000\022\004\uffc7\005\uffc7\006\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\030\uffc7\044\211\001\002\000\060\005" +
    "\uffda\007\uffda\011\uffda\012\uffda\020\uffda\021\uffda\025\uffda" +
    "\026\uffda\031\uffda\033\uffda\052\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\001\002\000\026\004\uffcf\005" +
    "\uffcf\006\uffcf\010\uffcf\022\uffcf\023\uffcf\024\uffcf\027\uffcf" +
    "\030\113\044\uffcf\001\002\000\036\005\074\007\062\025" +
    "\055\031\076\056\100\057\072\060\066\061\103\062\057" +
    "\063\073\064\070\065\075\066\061\067\065\001\002\000" +
    "\022\004\107\005\111\006\112\010\215\022\105\023\110" +
    "\024\106\030\113\001\002\000\052\005\074\007\062\011" +
    "\063\020\060\025\055\026\054\031\076\052\067\054\052" +
    "\055\077\056\100\057\072\060\066\061\166\062\057\063" +
    "\073\064\070\065\075\066\061\067\065\001\002\000\060" +
    "\005\uffdc\007\uffdc\011\uffdc\012\uffdc\020\uffdc\021\uffdc\025" +
    "\uffdc\026\uffdc\031\uffdc\033\uffdc\052\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002\000\006\012\uffe2" +
    "\033\uffe2\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\022\105\023\110\024\106\027\222" +
    "\030\113\001\002\000\036\005\074\007\062\025\055\031" +
    "\076\056\100\057\072\060\066\061\103\062\057\063\073" +
    "\064\070\065\075\066\061\067\065\001\002\000\022\004" +
    "\107\005\111\006\112\010\224\022\105\023\110\024\106" +
    "\030\113\001\002\000\004\044\225\001\002\000\060\005" +
    "\uffdb\007\uffdb\011\uffdb\012\uffdb\020\uffdb\021\uffdb\025\uffdb" +
    "\026\uffdb\031\uffdb\033\uffdb\052\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\001\002\000\004\061\227\001" +
    "\002\000\006\010\uffe8\027\uffe8\001\002\000\006\010\uffe9" +
    "\027\uffe9\001\002\000\004\011\232\001\002\000\004\032" +
    "\233\001\002\000\004\034\234\001\002\000\004\036\235" +
    "\001\002\000\004\016\236\001\002\000\004\007\237\001" +
    "\002\000\004\035\240\001\002\000\004\041\241\001\002" +
    "\000\004\042\242\001\002\000\004\061\243\001\002\000" +
    "\004\010\244\001\002\000\004\011\245\001\002\000\054" +
    "\005\074\007\062\011\063\012\uffe3\020\060\025\055\026" +
    "\054\031\076\052\067\054\052\055\077\056\100\057\072" +
    "\060\066\061\166\062\057\063\073\064\070\065\075\066" +
    "\061\067\065\001\002\000\004\012\uffe4\001\002\000\004" +
    "\012\250\001\002\000\004\012\ufffc\001\002\000\004\012" +
    "\252\001\002\000\006\002\ufffb\037\ufffb\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\002\001\001\000\006\010\011\011\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\017\001" +
    "\001\000\010\013\023\014\030\020\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\043" +
    "\015\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\225\001\001\000\002\001\001\000\004\017\050" +
    "\001\001\000\014\003\055\005\052\006\070\014\030\020" +
    "\031\001\001\000\002\001\001\000\010\003\055\005\052" +
    "\006\216\001\001\000\002\001\001\000\004\003\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\170\001\001\000\010\003" +
    "\055\005\052\006\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\130\001\001\000\004\003\127\001\001\000\004\003\126" +
    "\001\001\000\004\003\125\001\001\000\004\003\124\001" +
    "\001\000\004\003\123\001\001\000\004\003\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\115\016" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\153\001\001\000\002\001\001\000\004\003\155\001\001" +
    "\000\002\001\001\000\004\003\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\176\001\001\000\002" +
    "\001\001\000\006\003\055\005\200\001\001\000\002\001" +
    "\001\000\006\003\055\005\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\115\016" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\213\001\001\000" +
    "\002\001\001\000\006\003\055\005\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\220\001\001\000" +
    "\002\001\001\000\004\003\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\055\004\246\005\052\006\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(n.line, n.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp DOT ID LPAREN actual_params RPAREN 
            {
              IExp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp cl = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue fname = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> param_list = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(cl.getLine(), cl.getPos(),  cl, fname.lexeme, param_list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(l.line, l.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(m.line, m.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp f = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, e, f); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(f.line, f.pos, f.lexeme,  0); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(t.line, t.pos, "true", 1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(n.line, n.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = a; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= ID ASSIGN exp SEMI 
            {
              IStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
			RESULT = new AssignStatement(id.line, id.pos, id.lexeme, e);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= exp DOT ID LPAREN actual_params RPAREN SEMI 
            {
              IStatement RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp cl = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue fname = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> param_list = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
			RESULT = new CallStatement(cl.getLine(), cl.getPos(), cl, fname.lexeme, param_list);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
			RESULT = new MeggyToneStart(m.line, m.pos, e, e1);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new WhileStatement(op.line, op.pos, arg, b);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement c = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new IfStatement(op.line, op.pos, arg, b, c);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new IfStatement(op.line, op.pos, arg, b, null);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
			RESULT = new MeggyDelay(op.line, op.pos, a);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 
			RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); 
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> blk = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
			RESULT = new BlockStatement(l.line, l.pos, blk);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list ::= statement statement_list 
            {
              LinkedList<IStatement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IStatement> list = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 	
		// We get shift-reduce conflicts if we parse list-statement, so parse backwards
		list.addFirst(s);
	 	RESULT = list; 
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_list ::= 
            {
              LinkedList<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block_statement ::= statement_list 
            {
              BlockStatement RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		LinkedList<IStatement> slist = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
		IStatement first = slist.get(0);
		RESULT = new BlockStatement(first.getLine(), first.getPos(), slist); 
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // actual_params ::= actual_params COMMA exp 
            {
              List<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> list = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
		list.add(e);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("actual_params",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // actual_params ::= exp 
            {
              List<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  LinkedList<IExp> list = new LinkedList<IExp>();
		list.add(e);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("actual_params",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // actual_params ::= 
            {
              List<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("actual_params",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_params ::= formal_params COMMA type ID 
            {
              List<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		List<Formal> list = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 list.add(new Formal(t.getLine(), t.getPos(), t, name.lexeme));
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_params",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal_params ::= type ID 
            {
              List<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  LinkedList<Formal> list = new LinkedList<Formal>();
		list.add(new Formal(t.getLine(), t.getPos(), t, name.lexeme));
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_params",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_params ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_params",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= ID 
            {
              IType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ClassType(id.line, id.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= VOID 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RETURN exp SEMI RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int vlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int vlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<VarDecl> vlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		LinkedList<IStatement> slist = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new MethodDecl(p.line, p.pos, t, name.lexeme, formals, vlist, slist, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-12)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE var_decl_list statement_list RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int vlistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vlistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<VarDecl> vlist = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		LinkedList<IStatement> slist = (LinkedList<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MethodDecl(p.line, p.pos, t, name.lexeme, formals, vlist, slist, null);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl_list ::= method_decl_list method_decl 
            {
              List<MethodDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> l = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl c = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		l.add(c);
		RESULT = l;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl_list ::= 
            {
              List<MethodDecl> RESULT =null;
		
		RESULT = new LinkedList<MethodDecl>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_decl ::= type ID SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new VarDecl(t.getLine(), t.getPos(), t, i.lexeme);
	 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl",14, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl_list ::= var_decl_list var_decl 
            {
              List<VarDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<VarDecl> l = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		VarDecl c = (VarDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		l.add(c);
		RESULT = l;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decl_list ::= 
            {
              List<VarDecl> RESULT =null;
		
		RESULT = new LinkedList<VarDecl>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("var_decl_list",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= CLASS ID LBRACE var_decl_list method_decl_list RBRACE 
            {
              TopClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<VarDecl> v = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> m = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new TopClassDecl(c.line, c.pos, name.lexeme, v, m);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;

          	RESULT = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blk);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decl_list ::= class_decl 
            {
              List<IClassDecl> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		LinkedList<IClassDecl> list = new LinkedList<IClassDecl>();
		list.add(c);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decl_list ::= class_decl_list class_decl 
            {
              List<IClassDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IClassDecl> l = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		l.add(c);
		RESULT = l;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= IMPORT MEGGY SEMI main_class 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    	RESULT = new Program(0, 0, m, new LinkedList<IClassDecl>());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_decl_list 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IClassDecl> c = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    	RESULT = new Program(0, 0, m, c);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

