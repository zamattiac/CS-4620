
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 12 15:54:21 EST 2017
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 12 15:54:21 EST 2017
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\011\004\000\002\011\003\000\002\017\002" +
    "\000\002\007\024\000\002\010\007\000\002\013\004\000" +
    "\002\013\003\000\002\012\013\000\002\012\016\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\002\000\002\015\004\000\002\015\006\000" +
    "\002\016\002\000\002\016\003\000\002\016\005\000\002" +
    "\004\003\000\002\006\002\000\002\006\004\000\002\005" +
    "\005\000\002\005\013\000\002\005\007\000\002\005\007" +
    "\000\002\005\011\000\002\005\007\000\002\005\011\000" +
    "\002\005\011\000\002\003\006\000\002\003\003\000\002" +
    "\003\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\006\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\010\000\002\003\003\000\002" +
    "\003\004\000\002\003\005\000\002\003\010\000\002\003" +
    "\003\000\002\003\003\000\002\003\006\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\017\005\001\002\000\004\002\237\001" +
    "\002\000\004\046\006\001\002\000\004\044\007\001\002" +
    "\000\004\037\010\001\002\000\004\061\215\001\002\000" +
    "\006\002\uffff\037\013\001\002\000\006\002\ufffd\037\ufffd" +
    "\001\002\000\004\061\016\001\002\000\006\002\000\037" +
    "\013\001\002\000\006\002\ufffe\037\ufffe\001\002\000\004" +
    "\011\017\001\002\000\004\032\022\001\002\000\006\012" +
    "\ufff8\032\ufff8\001\002\000\006\012\214\032\022\001\002" +
    "\000\020\013\030\014\032\015\025\036\031\047\026\050" +
    "\027\051\023\001\002\000\004\061\uffef\001\002\000\004" +
    "\061\033\001\002\000\004\061\ufff4\001\002\000\004\061" +
    "\ufff1\001\002\000\004\061\ufff0\001\002\000\004\061\ufff5" +
    "\001\002\000\004\061\ufff2\001\002\000\004\061\ufff3\001" +
    "\002\000\004\007\034\001\002\000\024\010\uffee\013\030" +
    "\014\032\015\025\027\uffee\036\031\047\026\050\027\051" +
    "\023\001\002\000\004\061\212\001\002\000\006\010\040" +
    "\027\037\001\002\000\020\013\030\014\032\015\025\036" +
    "\031\047\026\050\027\051\023\001\002\000\004\011\041" +
    "\001\002\000\056\005\uffe7\007\uffe7\011\uffe7\012\uffe7\020" +
    "\uffe7\025\uffe7\026\uffe7\031\uffe7\033\uffe7\052\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\001\002\000\056" +
    "\005\066\007\055\011\056\012\045\020\054\025\047\026" +
    "\046\031\070\033\050\052\062\054\043\055\071\056\072" +
    "\057\064\060\061\061\057\062\052\063\065\064\063\065" +
    "\067\066\053\067\060\001\002\000\004\007\202\001\002" +
    "\000\056\005\uffe6\007\uffe6\011\uffe6\012\uffe6\020\uffe6\025" +
    "\uffe6\026\uffe6\031\uffe6\033\uffe6\052\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\006\012\ufff7" +
    "\032\ufff7\001\002\000\004\007\176\001\002\000\036\005" +
    "\066\007\055\025\047\031\070\056\072\057\064\060\061" +
    "\061\057\062\052\063\065\064\063\065\067\066\053\067" +
    "\060\001\002\000\036\005\066\007\055\025\047\031\070" +
    "\056\072\057\064\060\061\061\057\062\052\063\065\064" +
    "\063\065\067\066\053\067\060\001\002\000\020\004\100" +
    "\005\102\006\103\022\076\023\101\024\077\030\164\001" +
    "\002\000\026\004\uffd3\005\uffd3\006\uffd3\010\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\027\uffd3\030\uffd3\044\uffd3\001\002\000" +
    "\026\004\uffc8\005\uffc8\006\uffc8\010\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\027\uffc8\030\uffc8\044\uffc8\001\002\000\004\007" +
    "\156\001\002\000\040\005\066\007\055\015\152\025\047" +
    "\031\070\056\072\057\064\060\061\061\057\062\052\063" +
    "\065\064\063\065\067\066\053\067\060\001\002\000\054" +
    "\005\uffe7\007\uffe7\011\uffe7\012\uffe7\020\uffe7\025\uffe7\026" +
    "\uffe7\031\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\067\uffe7\001\002\000\026\004\uffcb\005\uffcb\006\uffcb" +
    "\010\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\044" +
    "\uffcb\001\002\000\026\004\uffca\005\uffca\006\uffca\010\uffca" +
    "\022\uffca\023\uffca\024\uffca\027\uffca\030\uffca\044\uffca\001" +
    "\002\000\026\004\uffdc\005\uffdc\006\uffdc\010\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\027\uffdc\030\uffdc\044\uffdc\001\002\000" +
    "\004\007\137\001\002\000\026\004\uffdb\005\uffdb\006\uffdb" +
    "\010\uffdb\022\uffdb\023\uffdb\024\uffdb\027\uffdb\030\uffdb\044" +
    "\uffdb\001\002\000\004\007\134\001\002\000\026\004\uffd2" +
    "\005\uffd2\006\uffd2\010\uffd2\022\uffd2\023\uffd2\024\uffd2\027" +
    "\uffd2\030\uffd2\044\uffd2\001\002\000\036\005\066\007\055" +
    "\025\047\031\070\056\072\057\064\060\061\061\057\062" +
    "\052\063\065\064\063\065\067\066\053\067\060\001\002" +
    "\000\026\004\uffcf\005\uffcf\006\uffcf\010\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\027\uffcf\030\uffcf\044\uffcf\001\002\000\004" +
    "\061\130\001\002\000\004\007\124\001\002\000\004\007" +
    "\073\001\002\000\036\005\066\007\055\025\047\031\070" +
    "\056\072\057\064\060\061\061\057\062\052\063\065\064" +
    "\063\065\067\066\053\067\060\001\002\000\022\004\100" +
    "\005\102\006\103\022\076\023\101\024\077\027\075\030" +
    "\104\001\002\000\036\005\066\007\055\025\047\031\070" +
    "\056\072\057\064\060\061\061\057\062\052\063\065\064" +
    "\063\065\067\066\053\067\060\001\002\000\036\005\066" +
    "\007\055\025\047\031\070\056\072\057\064\060\061\061" +
    "\057\062\052\063\065\064\063\065\067\066\053\067\060" +
    "\001\002\000\036\005\066\007\055\025\047\031\070\056" +
    "\072\057\064\060\061\061\057\062\052\063\065\064\063" +
    "\065\067\066\053\067\060\001\002\000\036\005\066\007" +
    "\055\025\047\031\070\056\072\057\064\060\061\061\057" +
    "\062\052\063\065\064\063\065\067\066\053\067\060\001" +
    "\002\000\036\005\066\007\055\025\047\031\070\056\072" +
    "\057\064\060\061\061\057\062\052\063\065\064\063\065" +
    "\067\066\053\067\060\001\002\000\036\005\066\007\055" +
    "\025\047\031\070\056\072\057\064\060\061\061\057\062" +
    "\052\063\065\064\063\065\067\066\053\067\060\001\002" +
    "\000\036\005\066\007\055\025\047\031\070\056\072\057" +
    "\064\060\061\061\057\062\052\063\065\064\063\065\067" +
    "\066\053\067\060\001\002\000\004\061\105\001\002\000" +
    "\004\007\106\001\002\000\042\005\066\007\055\010\uffeb" +
    "\025\047\027\uffeb\031\070\056\072\057\064\060\061\061" +
    "\057\062\052\063\065\064\063\065\067\066\053\067\060" +
    "\001\002\000\024\004\100\005\102\006\103\010\uffea\022" +
    "\076\023\101\024\077\027\uffea\030\104\001\002\000\006" +
    "\010\112\027\111\001\002\000\036\005\066\007\055\025" +
    "\047\031\070\056\072\057\064\060\061\061\057\062\052" +
    "\063\065\064\063\065\067\066\053\067\060\001\002\000" +
    "\026\004\uffcc\005\uffcc\006\uffcc\010\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\027\uffcc\030\uffcc\044\uffcc\001\002\000\024\004" +
    "\100\005\102\006\103\010\uffe9\022\076\023\101\024\077" +
    "\027\uffe9\030\104\001\002\000\026\004\uffd1\005\uffd1\006" +
    "\uffd1\010\uffd1\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\104" +
    "\044\uffd1\001\002\000\026\004\uffd9\005\uffd9\006\103\010" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\030\104\044\uffd9" +
    "\001\002\000\026\004\100\005\102\006\103\010\uffd8\022" +
    "\076\023\uffd8\024\uffd8\027\uffd8\030\104\044\uffd8\001\002" +
    "\000\026\004\uffda\005\uffda\006\103\010\uffda\022\uffda\023" +
    "\uffda\024\uffda\027\uffda\030\104\044\uffda\001\002\000\026" +
    "\004\100\005\102\006\103\010\uffd5\022\076\023\101\024" +
    "\uffd5\027\uffd5\030\104\044\uffd5\001\002\000\026\004\100" +
    "\005\102\006\103\010\uffcd\022\uffcd\023\uffcd\024\uffcd\027" +
    "\uffcd\030\104\044\uffcd\001\002\000\022\004\100\005\102" +
    "\006\103\010\123\022\076\023\101\024\077\030\104\001" +
    "\002\000\026\004\uffd0\005\uffd0\006\uffd0\010\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\027\uffd0\030\uffd0\044\uffd0\001\002\000" +
    "\036\005\066\007\055\025\047\031\070\056\072\057\064" +
    "\060\061\061\057\062\052\063\065\064\063\065\067\066" +
    "\053\067\060\001\002\000\022\004\100\005\102\006\103" +
    "\010\126\022\076\023\101\024\077\030\104\001\002\000" +
    "\004\044\127\001\002\000\060\005\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3\031\uffe3\033" +
    "\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\001\002\000\004\007\131\001\002\000\004\010\132" +
    "\001\002\000\026\004\uffc9\005\uffc9\006\uffc9\010\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\044\uffc9\001\002" +
    "\000\026\004\uffce\005\uffce\006\103\010\uffce\022\uffce\023" +
    "\uffce\024\uffce\027\uffce\030\104\044\uffce\001\002\000\036" +
    "\005\066\007\055\025\047\031\070\056\072\057\064\060" +
    "\061\061\057\062\052\063\065\064\063\065\067\066\053" +
    "\067\060\001\002\000\022\004\100\005\102\006\103\010" +
    "\136\022\076\023\101\024\077\030\104\001\002\000\026" +
    "\004\uffd7\005\uffd7\006\uffd7\010\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\027\uffd7\030\uffd7\044\uffd7\001\002\000\036\005\066" +
    "\007\055\025\047\031\070\056\072\057\064\060\061\061" +
    "\057\062\052\063\065\064\063\065\067\066\053\067\060" +
    "\001\002\000\022\004\100\005\102\006\103\022\076\023" +
    "\101\024\077\027\141\030\104\001\002\000\036\005\066" +
    "\007\055\025\047\031\070\056\072\057\064\060\061\061" +
    "\057\062\052\063\065\064\063\065\067\066\053\067\060" +
    "\001\002\000\022\004\100\005\102\006\103\022\076\023" +
    "\101\024\077\027\143\030\104\001\002\000\036\005\066" +
    "\007\055\025\047\031\070\056\072\057\064\060\061\061" +
    "\057\062\052\063\065\064\063\065\067\066\053\067\060" +
    "\001\002\000\022\004\100\005\102\006\103\010\145\022" +
    "\076\023\101\024\077\030\104\001\002\000\004\044\146" +
    "\001\002\000\060\005\uffe4\007\uffe4\011\uffe4\012\uffe4\020" +
    "\uffe4\021\uffe4\025\uffe4\026\uffe4\031\uffe4\033\uffe4\052\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001\002" +
    "\000\054\005\066\007\055\011\056\012\150\020\054\025" +
    "\047\026\046\031\070\052\062\054\043\055\071\056\072" +
    "\057\064\060\061\061\057\062\052\063\065\064\063\065" +
    "\067\066\053\067\060\001\002\000\060\005\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\020\uffe5\021\uffe5\025\uffe5\026\uffe5\031" +
    "\uffe5\033\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\001\002\000\022\004\100\005\102\006\103" +
    "\010\155\022\076\023\101\024\077\030\104\001\002\000" +
    "\004\010\153\001\002\000\036\005\066\007\055\025\047" +
    "\031\070\056\072\057\064\060\061\061\057\062\052\063" +
    "\065\064\063\065\067\066\053\067\060\001\002\000\026" +
    "\004\uffdd\005\uffdd\006\uffdd\010\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\027\uffdd\030\104\044\uffdd\001\002\000\026\004\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\022\uffd6\023\uffd6\024\uffd6\027" +
    "\uffd6\030\uffd6\044\uffd6\001\002\000\036\005\066\007\055" +
    "\025\047\031\070\056\072\057\064\060\061\061\057\062" +
    "\052\063\065\064\063\065\067\066\053\067\060\001\002" +
    "\000\022\004\100\005\102\006\103\010\160\022\076\023" +
    "\101\024\077\030\104\001\002\000\052\005\066\007\055" +
    "\011\056\020\054\025\047\026\046\031\070\052\062\054" +
    "\043\055\071\056\072\057\064\060\061\061\057\062\052" +
    "\063\065\064\063\065\067\066\053\067\060\001\002\000" +
    "\060\005\uffe2\007\uffe2\011\uffe2\012\uffe2\020\uffe2\021\162" +
    "\025\uffe2\026\uffe2\031\uffe2\033\uffe2\052\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\052\005" +
    "\066\007\055\011\056\020\054\025\047\026\046\031\070" +
    "\052\062\054\043\055\071\056\072\057\064\060\061\061" +
    "\057\062\052\063\065\064\063\065\067\066\053\067\060" +
    "\001\002\000\060\005\uffe1\007\uffe1\011\uffe1\012\uffe1\020" +
    "\uffe1\021\uffe1\025\uffe1\026\uffe1\031\uffe1\033\uffe1\052\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002" +
    "\000\004\061\165\001\002\000\004\007\166\001\002\000" +
    "\042\005\066\007\055\010\uffeb\025\047\027\uffeb\031\070" +
    "\056\072\057\064\060\061\061\057\062\052\063\065\064" +
    "\063\065\067\066\053\067\060\001\002\000\006\010\170" +
    "\027\111\001\002\000\022\004\uffcc\005\uffcc\006\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\030\uffcc\044\171\001\002\000\060" +
    "\005\uffde\007\uffde\011\uffde\012\uffde\020\uffde\021\uffde\025" +
    "\uffde\026\uffde\031\uffde\033\uffde\052\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\001\002\000\022\004\100" +
    "\005\102\006\103\022\076\023\101\024\077\030\104\044" +
    "\173\001\002\000\004\012\174\001\002\000\006\012\ufff6" +
    "\032\ufff6\001\002\000\026\004\uffd4\005\uffd4\006\uffd4\010" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030\104\044\uffd4" +
    "\001\002\000\036\005\066\007\055\025\047\031\070\056" +
    "\072\057\064\060\061\061\057\062\052\063\065\064\063" +
    "\065\067\066\053\067\060\001\002\000\022\004\100\005" +
    "\102\006\103\010\200\022\076\023\101\024\077\030\104" +
    "\001\002\000\052\005\066\007\055\011\056\020\054\025" +
    "\047\026\046\031\070\052\062\054\043\055\071\056\072" +
    "\057\064\060\061\061\057\062\052\063\065\064\063\065" +
    "\067\066\053\067\060\001\002\000\060\005\uffe0\007\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\021\uffe0\025\uffe0\026\uffe0\031" +
    "\uffe0\033\uffe0\052\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\001\002\000\036\005\066\007\055\025\047" +
    "\031\070\056\072\057\064\060\061\061\057\062\052\063" +
    "\065\064\063\065\067\066\053\067\060\001\002\000\022" +
    "\004\100\005\102\006\103\022\076\023\101\024\077\027" +
    "\204\030\104\001\002\000\036\005\066\007\055\025\047" +
    "\031\070\056\072\057\064\060\061\061\057\062\052\063" +
    "\065\064\063\065\067\066\053\067\060\001\002\000\022" +
    "\004\100\005\102\006\103\010\206\022\076\023\101\024" +
    "\077\030\104\001\002\000\004\044\207\001\002\000\060" +
    "\005\uffdf\007\uffdf\011\uffdf\012\uffdf\020\uffdf\021\uffdf\025" +
    "\uffdf\026\uffdf\031\uffdf\033\uffdf\052\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002\000\004\061\211" +
    "\001\002\000\006\010\uffec\027\uffec\001\002\000\006\010" +
    "\uffed\027\uffed\001\002\000\006\012\ufff9\032\ufff9\001\002" +
    "\000\006\002\ufffa\037\ufffa\001\002\000\004\011\216\001" +
    "\002\000\004\032\217\001\002\000\004\034\220\001\002" +
    "\000\004\036\221\001\002\000\004\016\222\001\002\000" +
    "\004\007\223\001\002\000\004\035\224\001\002\000\004" +
    "\041\225\001\002\000\004\042\226\001\002\000\004\061" +
    "\227\001\002\000\004\010\230\001\002\000\004\011\231" +
    "\001\002\000\054\005\uffe7\007\uffe7\011\uffe7\012\uffe7\020" +
    "\uffe7\025\uffe7\026\uffe7\031\uffe7\052\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\001\002\000\054\005\066" +
    "\007\055\011\056\012\uffe8\020\054\025\047\026\046\031" +
    "\070\052\062\054\043\055\071\056\072\057\064\060\061" +
    "\061\057\062\052\063\065\064\063\065\067\066\053\067" +
    "\060\001\002\000\004\012\234\001\002\000\004\012\ufffc" +
    "\001\002\000\004\012\236\001\002\000\006\002\ufffb\037" +
    "\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\010\001\001" +
    "\000\002\001\001\000\006\010\011\011\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\017\013" +
    "\020\001\001\000\002\001\001\000\004\012\212\001\001" +
    "\000\004\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\034\015\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\207\001\001\000" +
    "\002\001\001\000\004\006\041\001\001\000\006\003\050" +
    "\005\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\174\001\001" +
    "\000\004\003\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\150" +
    "\001\001\000\004\006\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\073\001\001\000" +
    "\002\001\001\000\004\003\121\001\001\000\004\003\120" +
    "\001\001\000\004\003\117\001\001\000\004\003\116\001" +
    "\001\000\004\003\115\001\001\000\004\003\114\001\001" +
    "\000\004\003\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\106\016\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\137\001\001" +
    "\000\002\001\001\000\004\003\141\001\001\000\002\001" +
    "\001\000\004\003\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\050\005\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\156\001\001\000\002\001\001\000\006" +
    "\003\050\005\160\001\001\000\002\001\001\000\006\003" +
    "\050\005\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\106\016\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\176\001\001\000\002\001\001\000\006" +
    "\003\050\005\200\001\001\000\002\001\001\000\004\003" +
    "\202\001\001\000\002\001\001\000\004\003\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\232\006\231\001\001\000\006\003" +
    "\050\005\043\001\001\000\002\001\001\000\004\017\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= TONE_LITERAL 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= NEW ID LPAREN RPAREN 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 RESULT = new NewExp(n.line, n.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= THIS 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			RESULT = new ThisLiteral(t.line, t.pos, t.lexeme, t.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= ID 
            {
              IExp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue id = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IdLiteral(id.line, id.pos, id.lexeme); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp DOT ID LPAREN actual_params RPAREN 
            {
              IExp RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		IExp cl = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue fname = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IExp> param_list = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new CallExp(cl.getLine(), cl.getPos(),  cl, fname.lexeme, param_list); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp LT exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new LtExp(l.line, l.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NegExp(m.line, m.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonLiteral(b.line, b.pos, b.lexeme, b.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp f = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyGetPixel(op.line, op.pos, e, f); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MulExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue f = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new FalseLiteral(f.line, f.pos, f.lexeme,  0); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new TrueLiteral(t.line, t.pos, "true", 1); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new NotExp(n.line, n.pos, a); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new AndExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = a; 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		 RESULT = new MeggyCheckButton(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new EqualExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new MinusExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new PlusExp(op.line, op.pos, a, b); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntLiteral(n.line, n.pos, n.lexeme, n.value); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteCast(op.line, op.pos, e); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= exp DOT ID LPAREN actual_params RPAREN SEMI 
            {
              IStatement RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp cl = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue fname = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int param_listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int param_listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> param_list = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
			
			RESULT = new CallStatement(cl.getLine(), cl.getPos(), cl, fname.lexeme, param_list);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= MEGGYTONESTART LPAREN exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
			RESULT = new MeggyToneStart(m.line, m.pos, e, e1);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new WhileStatement(op.line, op.pos, arg, b);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement c = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new IfStatement(op.line, op.pos, arg, b, c);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp arg = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement b = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
			RESULT = new IfStatement(op.line, op.pos, arg, b, null);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
			RESULT = new MeggyDelay(op.line, op.pos, a);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue op = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp a = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp b = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp c = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		 
			RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); 
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> blk = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
			RESULT = new BlockStatement(l.line, l.pos, blk);
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_list ::= statement_list statement 
            {
              List<IStatement> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 	
		list.add(s);
	 	RESULT = list; 
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_list ::= 
            {
              List<IStatement> RESULT =null;
		 RESULT = new LinkedList<IStatement>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block_statement ::= statement_list 
            {
              BlockStatement RESULT =null;
		int slistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IStatement> slist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
		IStatement first = slist.get(0);
		RESULT = new BlockStatement(first.getLine(), first.getPos(), slist); 
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("block_statement",2, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // actual_params ::= actual_params COMMA exp 
            {
              List<IExp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		List<IExp> list = (List<IExp>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 
		list.add(e);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("actual_params",12, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // actual_params ::= exp 
            {
              List<IExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  LinkedList<IExp> list = new LinkedList<IExp>();
		list.add(e);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("actual_params",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // actual_params ::= 
            {
              List<IExp> RESULT =null;
		 RESULT = new LinkedList<IExp>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("actual_params",12, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_params ::= formal_params COMMA type ID 
            {
              List<Formal> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		List<Formal> list = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 list.add(new Formal(t.getLine(), t.getPos(), t, name.lexeme));
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_params",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal_params ::= type ID 
            {
              List<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		  LinkedList<Formal> list = new LinkedList<Formal>();
		list.add(new Formal(t.getLine(), t.getPos(), t, name.lexeme));
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_params",11, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal_params ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("formal_params",11, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= MEGGYTONE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ToneType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= MEGGYBUTTON 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ButtonType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= MEGGYCOLOR 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ColorType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= VOID 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new VoidType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= INT 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new IntType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= BYTE 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new ByteType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= BOOLEAN 
            {
              IType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue b = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		 RESULT = new BoolType(b.line, b.pos); 
              CUP$mj$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE statement_list RETURN exp SEMI RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-10)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-10)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-9)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-9)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		List<IStatement> slist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		RESULT = new MethodDecl(p.line, p.pos, t, name.lexeme, formals, new LinkedList<VarDecl>(), slist, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-11)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl ::= PUBLIC type ID LPAREN formal_params RPAREN LBRACE statement_list RBRACE 
            {
              MethodDecl RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-7)).right;
		IType t = (IType)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int formalsleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int formalsright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		List<Formal> formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int slistleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int slistright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> slist = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MethodDecl(p.line, p.pos, t, name.lexeme, formals, new LinkedList<VarDecl>(), slist, null);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl",8, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method_decl_list ::= method_decl 
            {
              List<MethodDecl> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl c = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		LinkedList<MethodDecl> list = new LinkedList<MethodDecl>();
		list.add(c);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",9, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_decl_list ::= method_decl_list method_decl 
            {
              List<MethodDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> l = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MethodDecl c = (MethodDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		l.add(c);
		RESULT = l;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("method_decl_list",9, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_decl ::= CLASS ID LBRACE method_decl_list RBRACE 
            {
              TopClassDecl RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<MethodDecl> m = (List<MethodDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new TopClassDecl(c.line, c.pos, name.lexeme, new LinkedList<VarDecl>(), m);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE block_statement RBRACE NT$0 RBRACE 
            {
              MainClass RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MainClass) ((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-17)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-16)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-16)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",5, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-17)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-15)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-15)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int blkleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int blkright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		BlockStatement blk = (BlockStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;

          	RESULT = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blk);
          
              CUP$mj$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_decl_list ::= class_decl 
            {
              List<IClassDecl> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		LinkedList<IClassDecl> list = new LinkedList<IClassDecl>();
		list.add(c);
		RESULT = list;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_decl_list ::= class_decl_list class_decl 
            {
              List<IClassDecl> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IClassDecl> l = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		TopClassDecl c = (TopClassDecl)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		l.add(c);
		RESULT = l;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("class_decl_list",7, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= IMPORT MEGGY SEMI main_class 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    	RESULT = new Program(0, 0, m, new LinkedList<IClassDecl>());
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class class_decl_list 
            {
              Program RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		List<IClassDecl> c = (List<IClassDecl>)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
    	RESULT = new Program(0, 0, m, c);
    
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

